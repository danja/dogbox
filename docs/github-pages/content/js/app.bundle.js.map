{"version":3,"file":"js/app.bundle.js","mappings":";mBAKO,MAAMA,EAIT,WAAAC,GACIC,KAAKC,UAAY,IAAIC,GACzB,CAQA,EAAAC,CAAGC,EAAOC,GAMN,OALKL,KAAKC,UAAUK,IAAIF,IACpBJ,KAAKC,UAAUM,IAAIH,EAAO,IAAII,KAElCR,KAAKC,UAAUQ,IAAIL,GAAOM,IAAIL,GAEvB,KACH,MAAMM,EAAYX,KAAKC,UAAUQ,IAAIL,GACjCO,IACAA,EAAUC,OAAOP,GACM,IAAnBM,EAAUE,MACVb,KAAKC,UAAUW,OAAOR,IAItC,CAOA,IAAAU,CAAKV,EAAOW,GAER,MAAMJ,EAAYX,KAAKC,UAAUQ,IAAIL,GACjCO,GACAA,EAAUK,SAAQX,IACd,IACIA,EAASU,EACb,CAAE,MAAOE,GAGT,IAGZ,CAMA,kBAAAC,CAAmBd,GACXA,EACAJ,KAAKC,UAAUW,OAAOR,GAEtBJ,KAAKC,UAAUkB,OAEvB,EAIG,MAAM,EAAW,IAAIrB,EAGV,EAASK,GAAGiB,KAAK,GAUf,EAASN,KAAKM,KAAK,GCjFhC,IAAMC,EAMF,UANEA,EAOD,WAPCA,EAUG,eASHC,EAAW,IAAIxB,oqBCnBrB,IAAMyB,EAAe,WAiCvB,SAhCD,SAAAA,EAAYC,gGAAcC,CAAA,KAAAF,GACtBvB,KAAKwB,aAAeA,EACpBxB,KAAK0B,GAAK,GACV1B,KAAK2B,OAAS,EACd3B,KAAK4B,QAAU,EACf5B,KAAK6B,GAAK,IAGV7B,KAAK8B,IAAMN,EAAaO,mBACxB/B,KAAK8B,IAAIE,KAAO,WAChBhC,KAAK8B,IAAIG,UAAUC,eAAelC,KAAK6B,GAAIL,EAAaW,aAGxDnC,KAAKoC,KAAOZ,EAAaa,aACzBrC,KAAKoC,KAAKA,KAAKE,MAAQ,EAGvBtC,KAAK8B,IAAIS,QAAQvC,KAAKoC,MAGtBpC,KAAK8B,IAAIU,QAGTxC,KAAKoC,KAAKA,KAAKE,MAAQ,GAGvBtC,KAAKyC,YAAc,IAAIvC,IAGvBF,KAAK0C,sBAELC,QAAQC,IAAI,8BAChB,IAAC,EAAAC,IAAA,sBAAAP,MAED,WAAsB,IAAAQ,EAAA,KAIlBxB,EAASnB,GAAGkB,GAAqB,SAAA0B,GAAsB,IAAAC,EAAnBC,EAAKF,EAALE,MAAOX,EAAKS,EAALT,MAGvC,IACI,IAAMY,EAAWC,WAAWb,GACtBc,EAAMN,EAAKtB,aAAaW,YAE9B,OAAQc,GACJ,IAAK,QACDH,EAAKjB,GAAKqB,EACVJ,EAAKhB,IAAIG,UAAUoB,sBAAsBD,GACzCN,EAAKhB,IAAIG,UAAUC,eAAegB,EAAUE,GAC5C,MACJ,IAAK,SACDN,EAAKnB,OAASuB,EACd,MACJ,IAAK,UACDJ,EAAKlB,QAAUsB,EACf,MACJ,IAAK,MACL,IAAK,OAEDJ,EAAKV,KAAKA,KAAKiB,sBAAsBD,GACrCN,EAAKV,KAAKA,KAAKF,eAAegB,EAAUE,GACxC,MACJ,IAAK,aACL,IAAK,YACL,IAAK,cACL,IAAK,cACgB,QAAjBJ,EAAIF,EAAKQ,gBAAQ,IAAAN,GAAbA,EAAeO,UACfT,EAAKQ,SAASC,SAASN,EAAOC,GAI9C,CAAE,MAAOjC,GAET,CACJ,IAEAK,EAASnB,GAAGkB,GAAgB,WAAgB,IAAfjB,EAAKoD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC1BvB,EAAwC7B,EAAxC6B,UAAS0B,EAA+BvD,EAA7BwD,SAAAA,OAAQ,IAAAD,EAAG,GAAGA,EAAEE,EAAazD,EAAbyD,KAAMC,EAAO1D,EAAP0D,GACzChB,EAAKiB,OAAOF,EAAMD,EAAU3B,EAAW6B,EAC3C,IAEAxC,EAASnB,GAAGkB,GAAiB,WAAgB,IAAfjB,EAAKoD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC3BK,EAAazD,EAAbyD,KAAMC,EAAO1D,EAAP0D,GACdhB,EAAKkB,QAAQH,EAAMC,EACvB,GACJ,GAAC,CAAAjB,IAAA,eAAAP,MAED,SAAaT,GACT7B,KAAK6B,GAAKA,EACV7B,KAAK8B,IAAIG,UAAUC,eACfL,GAAM,GAAqB,EAAhBoC,KAAKC,SAAe,GAAKlE,KAAK2B,QACzC3B,KAAKwB,aAAaW,YAE1B,GAAC,CAAAU,IAAA,UAAAP,MAED,SAAQ6B,GACJnE,KAAKoC,KAAKG,QAAQ4B,EACtB,GAAC,CAAAtB,IAAA,aAAAP,MAED,WACItC,KAAKoC,KAAKgC,YACd,GAAC,CAAAvB,IAAA,SAAAP,MAED,WAA4E,IAArEuB,EAAIL,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGxD,KAAKwB,aAAaW,YAAayB,EAAQJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAAKvB,EAASuB,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAEI,EAAEN,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACtE,IACI,IAAK1D,KAAKwB,aAEN,YADAmB,QAAQ1B,MAAM,8BAIlB,IAAMmC,EAAMpD,KAAKwB,aAAaW,YACxBkC,EAAYJ,KAAKK,IAAIlB,EAAKS,GAG1BU,EAAWvE,KAAKwB,aAAaa,aACnCkC,EAASnC,KAAKE,MAAQ,EAGtBtC,KAAK8B,IAAIsC,aACTpE,KAAK8B,IAAIS,QAAQgC,GACjBA,EAAShC,QAAQvC,KAAKoC,MAGlBH,EACAjC,KAAKwE,aAAavC,GAElBA,EAAYjC,KAAK6B,GAIrB,IAAM4C,EAAgB,GAAqB,EAAhBR,KAAKC,SAAe,IAAMlE,KAAK4B,SAAW,GAC/D8C,EAAMT,KAAKU,IAAI,EAAGf,EAAWa,GAEnC9B,QAAQC,IAAI,WAADgC,OAAYd,GAAM,UAAS,YAAAc,OAAWf,EAAKgB,QAAQ,GAAE,WAAAD,OAAU3C,EAAS,UAAA2C,OAAShB,EAAQ,UAAAgB,OAASF,EAAIG,QAAQ,KAGzHN,EAASnC,KAAKiB,sBAAsBD,GACpCmB,EAASnC,KAAKF,eAAe,EAAGkB,GAE5BiB,EAAYjB,GAEZmB,EAASnC,KAAK0C,wBAAwB,EAAGT,GACzCE,EAASnC,KAAK0C,wBAAwBJ,EAAKL,EAAY,MAGvDE,EAASnC,KAAK0C,wBAAwBJ,EAAKtB,EAAM,KAIjDU,GACA9D,KAAKyC,YAAYlC,IAAIuD,EAAI,CACrB1B,KAAMmC,EACNF,UAAWjB,GAIvB,CAAE,MAAOnC,GACL0B,QAAQ1B,MAAM,mBAAoBA,EACtC,CACJ,GAAC,CAAA4B,IAAA,UAAAP,MAED,WAAmD,IAAAyC,EAAAC,EAAA,KAA3CnB,EAAIL,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAoB,QAApBuB,EAAG/E,KAAKwB,oBAAY,IAAAuD,OAAA,EAAjBA,EAAmB5C,YAAa2B,EAAEN,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC7C,IACI,IAAK1D,KAAKwB,aAEN,YADAmB,QAAQ1B,MAAM,yCAIlB,IAAMmC,EAAMpD,KAAKwB,aAAaW,YACxB8C,EAAchB,KAAKK,IAAIlB,EAAKS,GAAQT,GAE1C,GAAIU,GAAM9D,KAAKyC,YAAYnC,IAAIwD,GAAK,CAEhC,IACM1B,EADOpC,KAAKyC,YAAYhC,IAAIqD,GAChB1B,KAAKA,KACjB8C,EAAe9C,EAAKE,MAE1BK,QAAQC,IAAI,YAADgC,OAAad,EAAE,YAAAc,OAAWK,EAAYJ,QAAQ,GAAE,mBAAAD,OAAkBM,EAAaL,QAAQ,KAGlGzC,EAAKiB,sBAAsBD,GAC3BhB,EAAKF,eAAegD,EAAc9B,GAE9B6B,EAAc7B,GAEdhB,EAAK0C,wBAAwBI,EAAcD,GAC3C7C,EAAK0C,wBAAwB,EAAGG,EAAc,KAG9C7C,EAAK0C,wBAAwB,EAAG1B,EAAM,IAI1C+B,YAAW,WACHH,EAAKvC,YAAYnC,IAAIwD,KACDkB,EAAKvC,YAAYhC,IAAIqD,GAC7B1B,KAAKgC,aACjBY,EAAKvC,YAAW,OAAQqB,GAEhC,GAAgC,KAA5BmB,EAAc7B,EAAM,KAE5B,MAAO,IAAKU,EAAI,CAEZ,IAAM1B,EAAOpC,KAAKoC,KAAKA,KACjB8C,EAAe9C,EAAKE,MAE1BK,QAAQC,IAAI,uBAADgC,OAAwBK,EAAYJ,QAAQ,GAAE,mBAAAD,OAAkBM,EAAaL,QAAQ,KAGhGzC,EAAKiB,sBAAsBD,GAC3BhB,EAAKF,eAAegD,EAAc9B,GAClChB,EAAK0C,wBAAwB,EAAGG,EAAc,GAClD,CAEJ,CAAE,MAAOhE,GACL0B,QAAQ1B,MAAM,oBAAqBA,EACvC,CACJ,oFAAC,CA3NuB,qqBCArB,IAAMmE,EAAc,WA+BtB,SA9BD,SAAAA,EAAY5D,gGAAcC,CAAA,KAAA2D,GACtBpF,KAAKwB,aAAeA,EACpBxB,KAAKqF,WAAa,KAClBrF,KAAKsF,YAActF,KAAKuF,oBACxBvF,KAAKoC,KAAOZ,EAAaa,aACzBrC,KAAKoC,KAAKA,KAAKE,MAAQ,EAGvBtC,KAAKwF,MAAQhE,EAAaiE,qBAC1BzF,KAAKwF,MAAME,OAAS1F,KAAKsF,YACzBtF,KAAKwF,MAAMG,MAAO,EAGlB3F,KAAK4F,OAASpE,EAAaqE,qBAC3B7F,KAAK4F,OAAO5D,KAAO,WACnBhC,KAAK4F,OAAO3D,UAAUC,eAAe,IAAMV,EAAaW,aACxDnC,KAAK4F,OAAOE,EAAExD,MAAQ,EAGtBtC,KAAKoC,KAAKA,KAAKE,MAAQ,EAGvBtC,KAAKwF,MAAMjD,QAAQvC,KAAK4F,QACxB5F,KAAK4F,OAAOrD,QAAQvC,KAAKoC,MAGzBpC,KAAKwF,MAAMhD,QAGXxC,KAAK0C,qBACT,IAAC,EAAAG,IAAA,sBAAAP,MAED,WAAsB,IAAAQ,EAAA,KAIlBxB,EAASnB,GAAGkB,GAAqB,SAAA0B,GAAsB,IAAnBE,EAAKF,EAALE,MAAOX,EAAKS,EAALT,MAGvC,IACI,IAAMY,EAAWC,WAAWb,GACtBc,EAAMN,EAAKtB,aAAaW,YAE9B,OAAQc,GACJ,IAAK,cAaL,IAAK,MACL,IAAK,OACDH,EAAKV,KAAKA,KAAKiB,sBAAsBD,GACrCN,EAAKV,KAAKA,KAAKF,eAAegB,EAAUE,GACxC,MAbJ,IAAK,aACDN,EAAK8C,OAAO3D,UAAUoB,sBAAsBD,GAC5CN,EAAK8C,OAAO3D,UAAUC,eAAegB,EAAUE,GAC/C,MACJ,IAAK,SACL,IAAK,IACDN,EAAK8C,OAAOE,EAAEzC,sBAAsBD,GACpCN,EAAK8C,OAAOE,EAAE5D,eAAe+B,KAAKK,IAAI,GAAKpB,GAAWE,GAQlE,CAAE,MAAOnC,GAET,CACJ,IAEAK,EAASnB,GAAGkB,GAAgB,WAAgB,IAAfjB,EAAKoD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAClCG,EAAiCvD,EAAzBwD,SAAAA,OAAQ,IAAAD,EAAG,GAAGA,EAAEE,EAASzD,EAATyD,KACxBf,EAAKiB,OAAOF,EAAMD,EACtB,IAEAtC,EAASnB,GAAGkB,GAAiB,WAAgB,IACjCwC,GADuBL,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,GAC3BK,KACRf,EAAKkB,QAAQH,EACjB,GACJ,GAAC,CAAAhB,IAAA,oBAAAP,MAED,WAQI,IAPA,IAAMoD,EAAS1F,KAAKwB,aAAauE,aAC7B,EACA/F,KAAKqF,WACLrF,KAAKwB,aAAawE,YAGhBC,EAASP,EAAOQ,eAAe,GAC5BC,EAAI,EAAGA,EAAInG,KAAKqF,WAAYc,IACjCF,EAAOE,GAAqB,EAAhBlC,KAAKC,SAAe,EAGpC,OAAOwB,CACX,GAAC,CAAA7C,IAAA,eAAAP,MAED,SAAa8D,GACTpG,KAAK4F,OAAO3D,UAAUC,eAAekE,EAAMpG,KAAKwB,aAAaW,YACjE,GAAC,CAAAU,IAAA,OAAAP,MAED,SAAK+D,GACDrG,KAAK4F,OAAOE,EAAE5D,eAAemE,EAAGrG,KAAKwB,aAAaW,YACtD,GAAC,CAAAU,IAAA,WAAAP,MAED,SAASgE,GACLtG,KAAKoC,KAAKA,KAAKF,eAAeoE,EAAOtG,KAAKwB,aAAaW,YAC3D,GAAC,CAAAU,IAAA,UAAAP,MAED,SAAQ6B,GACJnE,KAAKoC,KAAKG,QAAQ4B,EACtB,GAAC,CAAAtB,IAAA,aAAAP,MAED,WACItC,KAAKoC,KAAKgC,YACd,GAAC,CAAAvB,IAAA,SAAAP,MAED,WAA6D,IAAtDuB,EAAIL,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGxD,KAAKwB,aAAaW,YAAayB,EAAQJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAC9CJ,EAAMpD,KAAKwB,aAAaW,YACxBkC,EAAYJ,KAAKK,IAAIlB,EAAKS,GAC1BzB,EAAOpC,KAAKoC,KAAKA,KAGvBA,EAAKiB,sBAAsBD,GAC3BhB,EAAKF,eAAe,EAAGkB,GAEnBiB,EAAYjB,GAEZhB,EAAK0C,wBAAwB,EAAGT,GAChCjC,EAAK0C,wBAAwBlB,EAAUS,EAAY,MAGnDjC,EAAK0C,wBAAwBlB,EAAUR,EAAM,IAErD,GAAC,CAAAP,IAAA,UAAAP,MAED,WAA8C,IAAtCuB,EAAIL,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGxD,KAAKwB,aAAaW,YACvBiB,EAAMpD,KAAKwB,aAAaW,YACxB8C,EAAchB,KAAKK,IAAIlB,EAAKS,GAC5BzB,EAAOpC,KAAKoC,KAAKA,KAGjB8C,EAAe9C,EAAKE,MAG1BF,EAAKiB,sBAAsBD,GAC3BhB,EAAKF,eAAegD,EAAc9B,GAE9B6B,EAAc7B,GAEdhB,EAAK0C,wBAAwBI,EAAcD,GAC3C7C,EAAK0C,wBAAwB,EAAGG,EAAc,KAG9C7C,EAAK0C,wBAAwB,EAAG1B,EAAM,GAE9C,GAEA,CAAAP,IAAA,UAAAP,MACA,WAAwC,IAAhCsB,EAAQJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAK+C,EAAQ/C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EACzBJ,EAAMpD,KAAKwB,aAAaW,YAC9BnC,KAAK+D,OAAOX,EAAKQ,GACjB5D,KAAKgE,QAAQZ,EAAMmD,EACvB,oFAAC,CAjKsB,m4CCApB,IAAMC,EAAiB,WA0DzB,SAzDD,SAAAA,EAAYhF,GAAc,IAAAsB,EAAA,kGAAArB,CAAA,KAAA+E,GACtBxG,KAAKwB,aAAeA,EACpBxB,KAAKyG,QAAU,GACfzG,KAAK0G,MAAQ,GACb1G,KAAK2G,IAAM,GAGX3G,KAAK4G,MAAQ5G,KAAKwB,aAAaa,aAC/BrC,KAAKiG,OAASjG,KAAKwB,aAAaa,aAGhC,IAAK,IAAI8D,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAExB,IAAMP,EAAS5F,KAAKwB,aAAaqE,qBACjCD,EAAO5D,KAAO,WACd4D,EAAOE,EAAExD,MAAQ,GAGjB,IAAMF,EAAOpC,KAAKwB,aAAaa,aAC/BD,EAAKA,KAAKE,MAAQ,IAGlBsD,EAAOrD,QAAQH,GAEfpC,KAAKyG,QAAQI,KAAKjB,GAClB5F,KAAK0G,MAAMG,KAAKzE,EACpB,CAGApC,KAAK8G,YAAY,IAAK,KAAM,KAAM,MAGlC9G,KAAK+G,QAAU/G,KAAKwB,aAAaa,aACjCrC,KAAKgH,QAAUhH,KAAKwB,aAAaa,aAGjCrC,KAAKyG,QAAQzF,SAAQ,SAAA4E,GACjB9C,EAAK8D,MAAMrE,QAAQqD,EACvB,IAGA5F,KAAK0G,MAAM1F,SAAQ,SAAAoB,GACfA,EAAKG,QAAQO,EAAKkE,QACtB,IAGAhH,KAAK4G,MAAMrE,QAAQvC,KAAK+G,SAGxB/G,KAAK+G,QAAQxE,QAAQvC,KAAKiG,QAC1BjG,KAAKgH,QAAQzE,QAAQvC,KAAKiG,QAG1BjG,KAAKiH,OAAOjH,KAAK2G,KAGjB3G,KAAK0C,qBACT,KAAC,EAAAG,IAAA,sBAAAP,MAED,WAAsB,IAAA0C,EAAA,KAClB1D,EAASnB,GAAGkB,GAAqB,SAAA0B,GAAsB,IAAnBE,EAAKF,EAALE,MAAOX,EAAKS,EAALT,MACzB,aAAVW,EACA+B,EAAK8B,YAAWI,MAAhBlC,EAAImC,EAAgB7E,IACH,cAAVW,EACP+B,EAAKoC,cAAaF,MAAlBlC,EAAImC,EAAkB7E,IACL,cAAVW,GACP+B,EAAKiC,OAAO3E,EAEpB,GACJ,GAAC,CAAAO,IAAA,cAAAP,MAED,SAAY+E,EAAIC,EAAIC,EAAIC,GAAI,IAAAC,EAAA,KACV,CAACJ,EAAIC,EAAIC,EAAIC,GACrBxG,SAAQ,SAACoF,EAAMD,GACbsB,EAAKhB,QAAQN,IACbsB,EAAKhB,QAAQN,GAAGlE,UAAUC,eAAekE,EAAMqB,EAAKjG,aAAaW,YAEzE,GACJ,GAAC,CAAAU,IAAA,gBAAAP,MAED,SAAcoF,EAAKC,EAAKC,EAAKC,GAAK,IAAAC,EAAA,KAClB,CAACJ,EAAKC,EAAKC,EAAKC,GACxB7G,SAAQ,SAAC+G,EAAI5B,GACT2B,EAAKrB,QAAQN,IACb2B,EAAKrB,QAAQN,GAAGL,EAAE5D,eAAe4F,EAAKE,MAAMD,GAAKD,EAAKtG,aAAaW,YAE3E,GACJ,GAAC,CAAAU,IAAA,QAAAP,MAED,SAAMyF,GAEa9D,KAAKgE,GAAYjI,KAAKwB,aAAawE,WAAlD,IACMkC,EAAIjE,KAAKkE,IAAI,EAAGJ,EAAK,GAC3B,OAAO9D,KAAKmE,KAAKF,IAAMA,EAAI,EAC/B,GAAC,CAAArF,IAAA,WAAAP,MAED,SAAS+F,EAAIC,EAAIC,EAAIC,GAAI,IAAAC,EAAA,KACP,CAACJ,EAAIC,EAAIC,EAAIC,GACrBxH,SAAQ,SAACoB,EAAM+D,GACbsC,EAAK/B,MAAMP,IACXsC,EAAK/B,MAAMP,GAAG/D,KAAKF,eAAeE,EAAMqG,EAAKjH,aAAaW,YAElE,GACJ,GAAC,CAAAU,IAAA,SAAAP,MAED,SAAOgE,GACHtG,KAAK2G,IAAML,EACX,IAAMlD,EAAMpD,KAAKwB,aAAaW,YAC9BnC,KAAK+G,QAAQ3E,KAAKF,eAAe,EAAIoE,EAAOlD,GAC5CpD,KAAKgH,QAAQ5E,KAAKF,eAAeoE,EAAOlD,EAC5C,GAAC,CAAAP,IAAA,UAAAP,MAED,SAAQ6B,GACJ,GAAIA,aAAuBuE,UACvB1I,KAAKiG,OAAO1D,QAAQ4B,OACjB,KAAIA,EAAYwE,OAInB,MAAM,IAAIC,MAAM,mDAFhB5I,KAAKiG,OAAO1D,QAAQ4B,EAAYwE,OAGpC,CACA,OAAOxE,CACX,GAAC,CAAAtB,IAAA,aAAAP,MAmBD,WACItC,KAAKyG,QAAQzF,SAAQ,SAAA4E,GAAM,OAAIA,EAAOxB,YAAY,IAClDpE,KAAK0G,MAAM1F,SAAQ,SAAAoB,GAAI,OAAIA,EAAKgC,YAAY,IACxCpE,KAAK+G,SAAS/G,KAAK+G,QAAQ3C,aAC3BpE,KAAKgH,SAAShH,KAAKgH,QAAQ5C,aAC3BpE,KAAK6I,OAAO7I,KAAK6I,MAAMzE,YAC/B,GAAC,CAAAvB,IAAA,iBAAApC,IAnBD,WAAuB,OAAO,CAAG,GAAC,CAAAoC,IAAA,kBAAApC,IAClC,WAAwB,OAAO,CAAG,GAAC,CAAAoC,IAAA,eAAAP,MAEnC,SAAawG,GAET9I,KAAKyG,QAAQzF,SAAQ,SAAA4E,GACjBkD,EAAOvG,QAAQqD,EACnB,IAGAkD,EAAOvG,QAAQvC,KAAK+G,QACxB,mFAAC,CA5IyB,qqBCAvB,IAAMgC,EAAiB,WASzB,SARD,SAAAA,iGAActH,CAAA,KAAAsH,GACV/I,KAAKgJ,OAAS,IACdhJ,KAAKiJ,MAAQ,GACbjJ,KAAKkJ,QAAU,GACflJ,KAAKmJ,QAAU,GAGfnJ,KAAK0C,qBACT,KAAC,EAAAG,IAAA,sBAAAP,MAED,WAAsB,IAAAQ,EAAA,KAClBxB,EAASnB,GAAGkB,GAAqB,SAAA0B,GAAsB,IAAnBE,EAAKF,EAALE,MAAOX,EAAKS,EAALT,MACvC,GAAIW,EAAMmG,WAAW,QAAS,CAC1B,IAAMC,EAAYpG,EAAMqG,MAAM,KAAK,GACnCxG,EAAKuG,GAAa/G,CACtB,CACJ,GACJ,GAAC,CAAAO,IAAA,UAAAP,MAED,SAAQ0G,EAAQC,EAAOC,EAASC,GAC5BnJ,KAAKgJ,OAASA,EACdhJ,KAAKiJ,MAAQA,EACbjJ,KAAKkJ,QAAUA,EACflJ,KAAKmJ,QAAUA,CACnB,GAAC,CAAAtG,IAAA,gBAAAP,MAED,SAAcW,EAAOsG,EAAYC,EAAWC,EAAcpF,EAAWkC,GACjE,IACMnD,EADeH,EAAMyG,QACFvH,YAGnBwH,EAAYtF,EAAYrE,KAAKgJ,OAC7BY,EAAWD,EAAY3J,KAAKiJ,MAC5BY,EAAexF,EAAYkC,EAAWvG,KAAKmJ,QAoBjD,OAjBAlG,EAAMI,sBAAsBD,GAC5BH,EAAMf,eAAeqH,EAAYlF,GAGjCpB,EAAM6B,wBAAwB0E,EAAWG,GAGzC1G,EAAM6B,wBAAwB2E,EAAcG,GAGxCC,EAAeD,GACf3G,EAAM6B,wBAAwB2E,EAAcI,GAIhD5G,EAAM6B,wBAAwB,EAAGT,EAAYkC,GAEtClC,EAAYkC,CACvB,mFAAC,CAvDyB,qqDCK9B,IAMauD,EAAc,WA+EtB,SA9ED,SAAAA,iGAAcrI,CAAA,KAAAqI,GACV,IAII,IAAKC,OAAOC,eAAiBD,OAAOE,mBAChC,MAAM,IAAIrB,MAAM,kDAIpB,IAAMoB,EAAeD,OAAOC,cAAgBD,OAAOE,mBACnDjK,KAAKwB,aAAe,IAAIwI,EAIxBhK,KAAKsD,SAAW,IAAIyF,EAGpB/I,KAAKkK,QAAU,IAAI3I,EAAgBvB,KAAKwB,cAGxCxB,KAAKwF,MAAQ,IAAIJ,EAAepF,KAAKwB,cAGrCxB,KAAKmK,SAAW,IAAI3D,EAAkBxG,KAAKwB,cAI3CxB,KAAKiG,OAASjG,KAAKwB,aAAaa,aAChCrC,KAAKiG,OAAO7D,KAAKE,MAAQ,GAIzBtC,KAAK6I,MAAQ7I,KAAKwB,aAAaa,aAC/BrC,KAAK6I,MAAMzG,KAAKE,MAAQ,EAGxBtC,KAAKkK,QAAQ3H,QAAQvC,KAAK6I,OAC1B7I,KAAKwF,MAAMjD,QAAQvC,KAAK6I,OACxB7I,KAAK6I,MAAMtG,QAAQvC,KAAKmK,SAASvD,OACjC5G,KAAKmK,SAAS5H,QAAQvC,KAAKiG,QAC3BjG,KAAKiG,OAAO1D,QAAQvC,KAAKwB,aAAa2C,aAItCnE,KAAKiG,OAAO7D,KAAKE,MAAQ,GAGzBtC,KAAKyC,YAAc,IAAIjC,GAE3B,CAAE,MAAOS,GAEL,MADA0B,QAAQ1B,MAAM,qCAAsCA,GAC9CA,CACV,CAGAjB,KAAKoK,OAAS,CACVC,MAAO,IACP1I,OAAQ,IACRC,QAAS,GACT0I,YAAa,GACbC,WAAY,IACZJ,SAAU,CAAC,IAAK,KAAM,KAAM,MAC5BK,UAAW,CAAC,GAAI,EAAG,EAAG,GACtB,aAAc,IACd,YAAa,GACb,cAAe,GACf,cAAe,IAInBxK,KAAKyK,eAGLzK,KAAK0C,sBAGLpB,EAASR,KLtFF,cKuFX,IAAC,EAAA+B,IAAA,sBAAAP,MAED,WAAsB,IAAAQ,EAAA,KAElBxB,EAASnB,GAAGkB,GAAqB,SAAA0B,GAAsB,IAAnBE,EAAKF,EAALE,MAAOX,EAAKS,EAALT,MACvCQ,EAAKS,SAASN,EAAOX,EACzB,IAGAhB,EAASnB,GLxFF,eKwFyB,SAACuK,GAC7B5H,EAAK6H,WAAWD,EACpB,GACJ,GAEA,CAAA7H,IAAA,WAAAP,MACA,SAASW,EAAOX,GAAO,IAAAU,EAInB,GAAKhD,KAAKoK,OAAOQ,eAAe3H,GAKhC,IAAI,IAAA8B,EAEM7B,EAAyC,iBAAvBlD,KAAKoK,OAAOnH,GAAsBE,WAAWb,GAASA,EACxE4C,EAAelF,KAAKoK,OAAOnH,GAGjC,GAAwB,iBAAbC,GAAyBe,KAAK4G,IAAI3H,EAAWgC,GAAgB,KACpE,OAGJlF,KAAKoK,OAAOnH,GAASC,EAIrB,IAAME,GAAuB,QAAjB2B,EAAA/E,KAAKwB,oBAAY,IAAAuD,OAAA,EAAjBA,EAAmB5C,cAAe,EAG9C,OAAQc,GACJ,IAAK,QACL,IAAK,SACL,IAAK,UACGjD,KAAKkK,SACLlK,KAAKkK,QAAQ3G,SAASN,EAAOC,GAEjC,MAEJ,IAAK,cACL,IAAK,aACL,IAAK,SACL,IAAK,IACGlD,KAAKwF,OACLxF,KAAKwF,MAAMjC,SAASN,EAAOC,GAE/B,MAEJ,IAAK,WACGlD,KAAKmK,WACLnK,KAAKmK,SAAS5G,SAASN,EAAOC,GAC9BlD,KAAK8K,kBAET,MAEJ,IAAK,MACL,IAAK,OACG9K,KAAKiG,SACLjG,KAAKiG,OAAO7D,KAAKiB,sBAAsBD,GACvCpD,KAAKiG,OAAO7D,KAAKF,eAAegB,EAAUE,IAE9C,MAEJ,QAEqB,QAAjBJ,EAAIhD,KAAKsD,gBAAQ,IAAAN,GAAbA,EAAeO,UACfvD,KAAKsD,SAASC,SAASN,EAAOC,GAK1C5B,EAASR,KAAKO,EAAqB,CAAE4B,MAAAA,EAAOX,MAAOY,GAEvD,CAAE,MAAOjC,GAET,CACJ,GAEA,CAAA4B,IAAA,eAAAP,MACA,WAAe,IAAA0C,EAAA,KAGX+F,OAAOC,QAAQhL,KAAKoK,QAAQpJ,SAAQ,SAAAiK,GAAoB,IAAAC,EAAAC,EAAAF,EAAA,GAAlBhI,EAAKiI,EAAA,GAAE5I,EAAK4I,EAAA,GAE1ClG,EAAKkF,SAA4C,mBAA1BlF,EAAKkF,QAAQ3G,UACpCyB,EAAKkF,QAAQ3G,SAASN,EAAOX,GAE7B0C,EAAKQ,OAAwC,mBAAxBR,EAAKQ,MAAMjC,UAChCyB,EAAKQ,MAAMjC,SAASN,EAAOX,GAE3B0C,EAAKmF,UAA8C,mBAA3BnF,EAAKmF,SAAS5G,UACtCyB,EAAKmF,SAAS5G,SAASN,EAAOX,EAEtC,IAGAtC,KAAK8K,gBACT,GAEA,CAAAjI,IAAA,iBAAAP,MACA,WACIhB,EAASR,KAAKO,EAAqB,CAC/B4B,MAAO,WACPX,MAAOtC,KAAKoK,OAAOD,WAGvB7I,EAASR,KAAKO,EAAqB,CAC/B4B,MAAO,YACPX,MAAOtC,KAAKoK,OAAOI,WAE3B,GAEA,CAAA3H,IAAA,aAAAP,MACA,SAAWoI,GAAQ,IAAAjD,EAAA,KACfsD,OAAOC,QAAQN,GAAQ1J,SAAQ,SAAAoK,GAAoB,IAAAC,EAAAF,EAAAC,EAAA,GAAlBnI,EAAKoI,EAAA,GAAE/I,EAAK+I,EAAA,GACrC5D,EAAK2C,OAAOQ,eAAe3H,KAC3BwE,EAAK2C,OAAOnH,GAASX,EACrBhB,EAASR,KAAKO,EAAqB,CAAE4B,MAAAA,EAAOX,MAAAA,IAEpD,GACJ,GAEA,CAAAO,IAAA,WAAAP,MACA,WAAyC,IAAAwF,EAAA,KAAhCvB,EAAQ/C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAAKI,EAAQJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAChC,IACI,IAAKxD,KAAKwB,aAEN,YADAmB,QAAQ1B,MAAM,gDAIlB,IAAMmC,EAAMpD,KAAKwB,aAAaW,YACxBmJ,EAAUlI,EAAMa,KAAKK,IAAI,GAAKiC,GAC9BgF,EAAS,GAAH3G,OAAMxB,EAAG,KAAAwB,OAAIX,KAAKC,SAASsH,SAAS,IAAIC,OAAO,EAAG,IAE9D9I,QAAQC,IAAI,iBAADgC,OAAkB2G,EAAM,gBAAA3G,OAAe2B,EAAQ,gBAAA3B,OAAehB,EAAQ,YAAAgB,OAAW5E,KAAKoK,OAAOC,MAAK,OAG7GrK,KAAKyC,YAAY/B,IAAI6K,GAGrBjK,EAASR,KAAKO,EAAgB,CAC1BY,UAAWjC,KAAKoK,OAAOC,MACvBzG,SAAAA,EACAC,KAAMT,EACNU,GAAIyH,IAIR,IAWMG,EAAUvG,YAXK,WACb2C,EAAKrF,YAAYnC,IAAIiL,KACrBjK,EAASR,KAAKO,EAAiB,CAC3BwC,KAAMiE,EAAKtG,aAAaW,YACxB2B,GAAIyH,IAERzD,EAAKrF,YAAW,OAAQ8I,GAEhC,GAG2D,KAAjBD,EAAUlI,IAGpDpD,KAAKyC,YAAY/B,IAAI,CACjBoD,GAAIyH,EACJG,QAASA,EACTC,OAAQ,WAAF,OAAQC,aAAaF,EAAQ,IAGvC/I,QAAQC,IAAI,uBAADgC,OAAwB2G,EAAM,UAAA3G,OAAS0G,EAAQzG,QAAQ,GAAE,KAExE,CAAE,MAAO5D,GACL0B,QAAQ1B,MAAM,qBAAsBA,EACxC,CACJ,GAEA,CAAA4B,IAAA,UAAAP,MACA,SAAQ6B,GACJnE,KAAKiG,OAAO1D,QAAQ4B,EACxB,GAEA,CAAAtB,IAAA,aAAAP,MACA,WACItC,KAAKkK,QAAQ9F,aACbpE,KAAKwF,MAAMpB,aACXpE,KAAKmK,SAAS/F,aACdpE,KAAKiG,OAAO7B,YAChB,oFAAC,CApRsB,yvCCZ3ByH,EAAA,kBAAAC,CAAA,MAAAC,EAAAD,EAAA,GAAAE,EAAAjB,OAAAkB,UAAAC,EAAAF,EAAApB,eAAAuB,EAAA,mBAAAC,OAAAA,OAAA,GAAAjG,EAAAgG,EAAAE,UAAA,aAAAC,EAAAH,EAAAI,eAAA,kBAAAC,EAAAL,EAAAM,aAAA,yBAAAC,EAAAX,EAAAD,EAAAE,EAAAE,GAAAnB,OAAA4B,eAAAZ,EAAAD,EAAA,CAAAxJ,MAAA0J,EAAAY,YAAAV,EAAAW,cAAAX,EAAAY,UAAAZ,GAAA,KAAAQ,EAAA,aAAAX,GAAAW,EAAA,SAAAX,EAAAD,EAAAE,GAAA,OAAAD,EAAAD,GAAAE,CAAA,WAAAe,EAAAjB,EAAAE,EAAAE,EAAAC,GAAA,IAAAhG,EAAA6F,GAAAA,EAAAC,qBAAAe,EAAAhB,EAAAgB,EAAAV,EAAAvB,OAAAkC,OAAA9G,EAAA8F,WAAA,OAAAS,EAAAJ,EAAA,mBAAAR,EAAAE,EAAAE,GAAA,IAAAC,EAAA,kBAAAhG,EAAAmG,GAAA,OAAAH,EAAA,MAAAvD,MAAA,uCAAAuD,EAAA,cAAAhG,EAAA,MAAAmG,EAAA,OAAAhK,MAAAyJ,EAAAmB,MAAA,OAAAhB,EAAAiB,OAAAhH,EAAA+F,EAAAkB,IAAAd,IAAA,KAAAE,EAAAN,EAAAmB,SAAA,GAAAb,EAAA,KAAAE,EAAAY,EAAAd,EAAAN,GAAA,GAAAQ,EAAA,IAAAA,IAAAa,EAAA,gBAAAb,CAAA,cAAAR,EAAAiB,OAAAjB,EAAAsB,KAAAtB,EAAAuB,MAAAvB,EAAAkB,SAAA,aAAAlB,EAAAiB,OAAA,QAAAhB,EAAA,MAAAA,EAAA,EAAAD,EAAAkB,IAAAlB,EAAAwB,kBAAAxB,EAAAkB,IAAA,gBAAAlB,EAAAiB,QAAAjB,EAAAyB,OAAA,SAAAzB,EAAAkB,KAAAjB,EAAA,MAAAY,EAAAa,EAAA9B,EAAAE,EAAAE,GAAA,cAAAa,EAAA/K,KAAA,IAAAmK,EAAAD,EAAAgB,KAAA,IAAAH,EAAAK,MAAAG,EAAA,gBAAAjL,MAAAyK,EAAAK,IAAAF,KAAAhB,EAAAgB,KAAA,WAAAH,EAAA/K,OAAAmK,EAAA,EAAAD,EAAAiB,OAAA,QAAAjB,EAAAkB,IAAAL,EAAAK,IAAA,IAAAtB,EAAAI,EAAA,IAAA2B,EAAA1B,GAAA,SAAAG,CAAA,UAAAsB,EAAA7B,EAAAD,EAAAE,GAAA,WAAAhK,KAAA,SAAAoL,IAAArB,EAAA+B,KAAAhC,EAAAE,GAAA,OAAAD,GAAA,OAAA/J,KAAA,QAAAoL,IAAArB,EAAA,EAAAD,EAAAiC,KAAAhB,EAAA,IAAAQ,EAAA,YAAAP,IAAA,UAAAgB,IAAA,UAAAC,IAAA,KAAAC,EAAA,GAAAxB,EAAAwB,EAAA/H,GAAA,8BAAAgI,EAAApD,OAAAqD,eAAAC,EAAAF,GAAAA,EAAAA,EAAAG,EAAA,MAAAD,GAAAA,IAAArC,GAAAE,EAAA4B,KAAAO,EAAAlI,KAAA+H,EAAAG,GAAA,IAAAE,EAAAN,EAAAhC,UAAAe,EAAAf,UAAAlB,OAAAkC,OAAAiB,GAAA,SAAAM,EAAAzC,GAAA,0BAAA/K,SAAA,SAAA8K,GAAAY,EAAAX,EAAAD,GAAA,SAAAC,GAAA,YAAA0C,QAAA3C,EAAAC,EAAA,gBAAA2C,EAAA3C,EAAAD,GAAA,SAAAE,EAAAG,EAAAhG,EAAAmG,EAAAE,GAAA,IAAAE,EAAAkB,EAAA7B,EAAAI,GAAAJ,EAAA5F,GAAA,aAAAuG,EAAA1K,KAAA,KAAA+K,EAAAL,EAAAU,IAAAG,EAAAR,EAAAzK,MAAA,OAAAiL,GAAA,UAAAoB,EAAApB,IAAArB,EAAA4B,KAAAP,EAAA,WAAAzB,EAAA8C,QAAArB,EAAAsB,SAAAC,MAAA,SAAA/C,GAAAC,EAAA,OAAAD,EAAAO,EAAAE,EAAA,aAAAT,GAAAC,EAAA,QAAAD,EAAAO,EAAAE,EAAA,IAAAV,EAAA8C,QAAArB,GAAAuB,MAAA,SAAA/C,GAAAgB,EAAAzK,MAAAyJ,EAAAO,EAAAS,EAAA,aAAAhB,GAAA,OAAAC,EAAA,QAAAD,EAAAO,EAAAE,EAAA,IAAAA,EAAAE,EAAAU,IAAA,KAAAjB,EAAAO,EAAA,yBAAAX,EAAAG,GAAA,SAAA/F,IAAA,WAAA2F,GAAA,SAAAA,EAAAK,GAAAH,EAAAD,EAAAG,EAAAJ,EAAAK,EAAA,WAAAA,EAAAA,EAAAA,EAAA2C,KAAA3I,EAAAA,GAAAA,GAAA,gBAAAmH,EAAAxB,EAAAE,GAAA,IAAAE,EAAAF,EAAAmB,OAAAhB,EAAAL,EAAA3F,EAAA+F,GAAA,GAAAC,IAAAJ,EAAA,OAAAC,EAAAqB,SAAA,eAAAnB,GAAAJ,EAAA3F,EAAA,SAAA6F,EAAAmB,OAAA,SAAAnB,EAAAoB,IAAArB,EAAAuB,EAAAxB,EAAAE,GAAA,UAAAA,EAAAmB,SAAA,WAAAjB,IAAAF,EAAAmB,OAAA,QAAAnB,EAAAoB,IAAA,IAAA2B,UAAA,oCAAA7C,EAAA,aAAAqB,EAAA,IAAApH,EAAAyH,EAAAzB,EAAAL,EAAA3F,EAAA6F,EAAAoB,KAAA,aAAAjH,EAAAnE,KAAA,OAAAgK,EAAAmB,OAAA,QAAAnB,EAAAoB,IAAAjH,EAAAiH,IAAApB,EAAAqB,SAAA,KAAAE,EAAA,IAAAjB,EAAAnG,EAAAiH,IAAA,OAAAd,EAAAA,EAAAY,MAAAlB,EAAAF,EAAAA,GAAAQ,EAAAhK,MAAA0J,EAAAgD,KAAAlD,EAAAI,EAAA,WAAAF,EAAAmB,SAAAnB,EAAAmB,OAAA,OAAAnB,EAAAoB,IAAArB,GAAAC,EAAAqB,SAAA,KAAAE,GAAAjB,GAAAN,EAAAmB,OAAA,QAAAnB,EAAAoB,IAAA,IAAA2B,UAAA,oCAAA/C,EAAAqB,SAAA,KAAAE,EAAA,UAAA0B,EAAAlD,GAAA,KAAAmD,WAAArI,KAAAkF,EAAA,UAAAoD,EAAArD,GAAA,IAAAE,EAAAF,EAAA,OAAAE,EAAAhK,KAAA,SAAAgK,EAAAoB,IAAArB,EAAAD,EAAA,GAAAE,CAAA,UAAA6B,EAAA9B,GAAA,KAAAmD,WAAA,OAAAnD,EAAA/K,QAAAiO,EAAA,WAAAG,OAAA,YAAAd,EAAAxC,GAAA,SAAAA,EAAA,KAAAE,EAAAF,EAAA3F,GAAA,GAAA6F,EAAA,OAAAA,EAAA8B,KAAAhC,GAAA,sBAAAA,EAAAkD,KAAA,OAAAlD,EAAA,IAAAuD,MAAAvD,EAAArI,QAAA,KAAA0I,GAAA,EAAAG,EAAA,SAAAN,IAAA,OAAAG,EAAAL,EAAArI,QAAA,GAAAyI,EAAA4B,KAAAhC,EAAAK,GAAA,OAAAH,EAAA1J,MAAAwJ,EAAAK,GAAAH,EAAAkB,MAAA,EAAAlB,EAAA,OAAAA,EAAA1J,MAAAyJ,EAAAC,EAAAkB,MAAA,EAAAlB,CAAA,SAAAM,EAAA0C,KAAA1C,CAAA,YAAAyC,UAAAJ,EAAA7C,GAAA,2BAAAkC,EAAA/B,UAAAgC,EAAAvB,EAAA6B,EAAA,cAAAN,GAAAvB,EAAAuB,EAAA,cAAAD,GAAAtB,EAAAuB,EAAAzB,EAAAwB,EAAAsB,YAAA,qBAAAxD,EAAAyD,oBAAA,SAAAxD,GAAA,IAAAD,EAAA,mBAAAC,GAAAA,EAAAhM,YAAA,QAAA+L,IAAAA,IAAAkC,GAAA,uBAAAlC,EAAAwD,aAAAxD,EAAA0D,MAAA,EAAA1D,EAAA2D,KAAA,SAAA1D,GAAA,OAAAhB,OAAA2E,eAAA3E,OAAA2E,eAAA3D,EAAAkC,IAAAlC,EAAA4D,UAAA1B,EAAAvB,EAAAX,EAAAS,EAAA,sBAAAT,EAAAE,UAAAlB,OAAAkC,OAAAsB,GAAAxC,CAAA,EAAAD,EAAA8D,MAAA,SAAA7D,GAAA,OAAA8C,QAAA9C,EAAA,EAAAyC,EAAAE,EAAAzC,WAAAS,EAAAgC,EAAAzC,UAAAK,GAAA,0BAAAR,EAAA4C,cAAAA,EAAA5C,EAAA+D,MAAA,SAAA9D,EAAAC,EAAAE,EAAAC,EAAAhG,QAAA,IAAAA,IAAAA,EAAA2J,SAAA,IAAAxD,EAAA,IAAAoC,EAAA3B,EAAAhB,EAAAC,EAAAE,EAAAC,GAAAhG,GAAA,OAAA2F,EAAAyD,oBAAAvD,GAAAM,EAAAA,EAAA0C,OAAAF,MAAA,SAAA/C,GAAA,OAAAA,EAAAmB,KAAAnB,EAAAzJ,MAAAgK,EAAA0C,MAAA,KAAAR,EAAAD,GAAA7B,EAAA6B,EAAA/B,EAAA,aAAAE,EAAA6B,EAAApI,GAAA,0BAAAuG,EAAA6B,EAAA,qDAAAzC,EAAAiE,KAAA,SAAAhE,GAAA,IAAAD,EAAAf,OAAAgB,GAAAC,EAAA,WAAAE,KAAAJ,EAAAE,EAAAgE,QAAA9D,GAAA,gBAAAH,IAAA,KAAAC,EAAAvI,QAAA,IAAAyI,EAAAF,EAAAiE,SAAAnE,EAAA,OAAAC,EAAAzJ,MAAA4J,EAAAH,EAAAmB,MAAA,EAAAnB,EAAA,OAAAA,EAAAmB,MAAA,EAAAnB,CAAA,GAAAD,EAAAoE,OAAA5B,EAAAT,EAAA5B,UAAA,CAAAlM,YAAA8N,EAAAuB,MAAA,SAAAtD,GAAA,QAAAqE,KAAA,KAAAnB,KAAA,OAAAxB,KAAA,KAAAC,MAAA1B,EAAA,KAAAmB,MAAA,OAAAG,SAAA,UAAAF,OAAA,YAAAC,IAAArB,EAAA,KAAAmD,WAAAlO,QAAAmO,IAAArD,EAAA,QAAAE,KAAA,WAAAA,EAAAoE,OAAA,IAAAlE,EAAA4B,KAAA,KAAA9B,KAAAqD,OAAArD,EAAAqE,MAAA,WAAArE,GAAAD,EAAA,EAAAuE,KAAA,gBAAApD,MAAA,MAAAnB,EAAA,KAAAmD,WAAA,mBAAAnD,EAAA/J,KAAA,MAAA+J,EAAAqB,IAAA,YAAAmD,IAAA,EAAA7C,kBAAA,SAAA5B,GAAA,QAAAoB,KAAA,MAAApB,EAAA,IAAAE,EAAA,cAAAE,EAAAH,GAAAO,EAAAtK,KAAA,QAAAsK,EAAAc,IAAAtB,EAAAE,EAAAgD,KAAAjD,CAAA,SAAAI,EAAAH,EAAAkD,WAAAzL,OAAA,EAAA0I,GAAA,IAAAA,EAAA,KAAAhG,EAAA,KAAA+I,WAAA/C,GAAAG,EAAAnG,EAAA,GAAAqG,EAAA,KAAA2D,KAAAzD,EAAAvG,EAAA,GAAA4G,EAAA5G,EAAA,WAAAA,EAAA,UAAA+F,EAAA,cAAAQ,IAAAK,EAAA,MAAAnE,MAAA,mDAAAzC,EAAA,IAAAA,EAAA,IAAAqG,EAAA,IAAAA,EAAAE,EAAA,YAAAS,OAAA,YAAAC,IAAArB,EAAAG,EAAAQ,IAAA,KAAAF,EAAAO,EAAA,OAAAb,EAAAa,IAAA,KAAAY,OAAA,SAAA5B,EAAAD,GAAA,QAAAE,EAAA,KAAAkD,WAAAzL,OAAA,EAAAuI,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAgD,WAAAlD,GAAA,GAAAE,EAAA,OAAAA,EAAA,SAAAiE,MAAA,KAAAA,KAAAjE,EAAA,QAAAC,EAAAD,EAAA,OAAAC,IAAA,UAAAJ,GAAA,aAAAA,IAAAI,EAAA,IAAAL,GAAAA,GAAAK,EAAA,KAAAA,EAAA,UAAAhG,EAAAgG,EAAAA,EAAA,aAAAhG,EAAAnE,KAAA+J,EAAA5F,EAAAiH,IAAAtB,EAAAK,GAAA,KAAAgB,OAAA,YAAA6B,KAAA7C,EAAA,GAAAoB,GAAA,KAAAiD,SAAArK,EAAA,EAAAqK,SAAA,SAAAzE,EAAAD,GAAA,aAAAC,EAAA/J,KAAA,MAAA+J,EAAAqB,IAAA,gBAAArB,EAAA/J,MAAA,aAAA+J,EAAA/J,KAAA,KAAAgN,KAAAjD,EAAAqB,IAAA,WAAArB,EAAA/J,MAAA,KAAAuO,KAAA,KAAAnD,IAAArB,EAAAqB,IAAA,KAAAD,OAAA,cAAA6B,KAAA,kBAAAjD,EAAA/J,MAAA8J,IAAA,KAAAkD,KAAAlD,GAAAyB,CAAA,EAAAkD,OAAA,SAAA1E,GAAA,QAAAD,EAAA,KAAAoD,WAAAzL,OAAA,EAAAqI,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAkD,WAAApD,GAAA,GAAAE,EAAA,KAAAD,EAAA,YAAAyE,SAAAxE,EAAA,GAAAA,EAAA,IAAAmD,EAAAnD,GAAAuB,CAAA,kBAAAxB,GAAA,QAAAD,EAAA,KAAAoD,WAAAzL,OAAA,EAAAqI,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAkD,WAAApD,GAAA,GAAAE,EAAA,KAAAD,EAAA,KAAAG,EAAAF,EAAA,gBAAAE,EAAAlK,KAAA,KAAAmK,EAAAD,EAAAkB,IAAA+B,EAAAnD,EAAA,QAAAG,CAAA,QAAAvD,MAAA,0BAAA8H,cAAA,SAAA5E,EAAAE,EAAAE,GAAA,YAAAmB,SAAA,CAAAlH,EAAAmI,EAAAxC,GAAAA,EAAAE,EAAAE,EAAAA,GAAA,cAAAiB,SAAA,KAAAC,IAAArB,GAAAwB,CAAA,GAAAzB,CAAA,UAAA6E,EAAAzE,EAAAH,EAAAC,EAAAF,EAAAK,EAAAG,EAAAI,GAAA,QAAAvG,EAAA+F,EAAAI,GAAAI,GAAAF,EAAArG,EAAA7D,KAAA,OAAA4J,GAAA,YAAAF,EAAAE,EAAA,CAAA/F,EAAA+G,KAAAnB,EAAAS,GAAAsD,QAAAlB,QAAApC,GAAAsC,KAAAhD,EAAAK,EAAA,UAAAyE,EAAA1E,GAAA,sBAAAH,EAAA,KAAAC,EAAAxI,UAAA,WAAAsM,SAAA,SAAAhE,EAAAK,GAAA,IAAAG,EAAAJ,EAAAhF,MAAA6E,EAAAC,GAAA,SAAA6E,EAAA3E,GAAAyE,EAAArE,EAAAR,EAAAK,EAAA0E,EAAAC,EAAA,OAAA5E,EAAA,UAAA4E,EAAA5E,GAAAyE,EAAArE,EAAAR,EAAAK,EAAA0E,EAAAC,EAAA,QAAA5E,EAAA,CAAA2E,OAAA,gBAAAE,EAAA/E,EAAAF,GAAA,QAAAC,EAAA,EAAAA,EAAAD,EAAArI,OAAAsI,IAAA,KAAAI,EAAAL,EAAAC,GAAAI,EAAAS,WAAAT,EAAAS,aAAA,EAAAT,EAAAU,cAAA,YAAAV,IAAAA,EAAAW,UAAA,GAAA/B,OAAA4B,eAAAX,EAAAgF,EAAA7E,EAAAtJ,KAAAsJ,EAAA,WAAA6E,EAAAjF,GAAA,IAAA5F,EAAA,SAAA4F,GAAA,aAAA4C,EAAA5C,KAAAA,EAAA,OAAAA,EAAA,IAAAC,EAAAD,EAAAK,OAAA6E,aAAA,YAAAjF,EAAA,KAAA7F,EAAA6F,EAAA8B,KAAA/B,EAAAD,UAAA,aAAA6C,EAAAxI,GAAA,OAAAA,EAAA,UAAA4I,UAAA,uDAAAmC,OAAAnF,EAAA,CAAAoF,CAAApF,GAAA,gBAAA4C,EAAAxI,GAAAA,EAAAA,EAAA,GAEO,IAAMiL,EAAe,WAwBvB,OA1BLpF,EAGI,SAAAoF,IAAc,IAAAtO,EAAA,MAHlB,SAAAwJ,EAAAJ,GAAA,KAAAI,aAAAJ,GAAA,UAAA6C,UAAA,qCAGkBtN,CAAA,KAAA2P,GACVpR,KAAKqR,MAAQ,KACbrR,KAAKsR,aAAc,EACnBtR,KAAKuR,cAAe,EACpBvR,KAAKwR,iBAAkB,EACvBxR,KAAKyR,mBAAqB,KAC1BzR,KAAK0R,WAAa,CAAC,EACnB1R,KAAK2R,QAAU3R,KAAK4R,oBAGpB5R,KAAK2K,WAAa3K,KAAK2K,WAAWvJ,KAAKpB,MACvCA,KAAK6R,cAAgB7R,KAAK6R,cAAczQ,KAAKpB,MAC7CA,KAAK8R,UAAY9R,KAAK8R,UAAU1Q,KAAKpB,MACrCA,KAAK+R,WAAa/R,KAAK+R,WAAW3Q,KAAKpB,MACvCA,KAAKgS,eAAiBhS,KAAKgS,eAAe5Q,KAAKpB,MAC/CA,KAAKiS,sBAAwBjS,KAAKiS,sBAAsB7Q,KAAKpB,MAGjC,YAAxBkS,SAASC,WACTD,SAASE,iBAAiB,oBAAoB,kBAAMtP,EAAKiP,YAAY,IAErE/R,KAAK+R,YAEb,EA1BJjG,EA0BK,EAAAjJ,IAAA,aAAAP,OAAA+P,EAAAzB,EAAA/E,IAAA4D,MAED,SAAA6C,IAAA,IAAAtN,EAAA,YAAA6G,IAAAkC,MAAA,SAAAwE,GAAA,cAAAA,EAAApC,KAAAoC,EAAAvD,MAAA,OACI,IACIhP,KAAKwS,kBACLxS,KAAK0C,sBAGL1C,KAAK0R,WAAWe,SAASL,iBAAiB,SAAS,kBAAMpN,EAAK8M,WAAW,IACzE9R,KAAK0R,WAAWgB,QAAQN,iBAAiB,SAAS,kBAAMpN,EAAK6M,eAAe,IAG5E7R,KAAK2S,aAAa,4BAA6B,WAG/CrR,EAASR,KN1BT,WM4BJ,CAAE,MAAOG,GACL0B,QAAQ1B,MAAM,iCAAkCA,GAChDjB,KAAK2S,aAAa,mDAAoD,UAC1E,CAAC,wBAAAJ,EAAAjC,OAAA,GAAAgC,EAAA,UACJ,WAnBe,OAAAD,EAAAnL,MAAC,KAAD1D,UAAA,KAAAX,IAAA,YAAAP,OAAAsQ,EAAAhC,EAAA/E,IAAA4D,MAqBhB,SAAAoD,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAxL,EAAA,YAAAoE,IAAAkC,MAAA,SAAAmF,GAAA,cAAAA,EAAA/C,KAAA+C,EAAAlE,MAAA,WAEQhP,KAAKuR,aAAc,CAAF2B,EAAAlE,KAAA,eAAAkE,EAAAvF,OAAA,iBAcjB,GAbJ3N,KAAKuR,cAAe,EAAK2B,EAAA/C,KAAA,EAGrBnQ,KAAK2S,aAAa,wBAAyB,WAG3ChQ,QAAQC,IAAI,gBAAiB,CACzBuQ,UAAWC,UAAUD,UACrBE,cAAetJ,OAAOuJ,gBACtBC,mBAAoBxJ,OAAOC,eAAgBD,OAAOE,oBAClDuJ,SAAUzJ,OAAOyJ,SAASC,QAIC,IAA3B1J,OAAOuJ,gBAAyB,CAAAJ,EAAAlE,KAAA,cAC1B,IAAIpG,MAAM,oEAAmE,OAIlB,GAAhDmB,OAAOC,cAAgBD,OAAOE,mBAChC,CAAFiJ,EAAAlE,KAAA,eACP,IAAIpG,MAAM,kDAAiD,QAWrE,GAPAjG,QAAQC,IAAI,gBAAiB,CACzBuQ,UAAWC,UAAUD,UACrBE,cAAetJ,OAAOuJ,gBACtBC,mBAAoBxJ,OAAOC,eAAgBD,OAAOE,oBAClDuJ,SAAUzJ,OAAOyJ,SAASC,QAIC,IAA3B1J,OAAOuJ,gBAAyB,CAAAJ,EAAAlE,KAAA,eAC1B,IAAIpG,MAAM,oEAAmE,WAIlFmB,OAAOC,cAAiBD,OAAOE,mBAAkB,CAAAiJ,EAAAlE,KAAA,eAC5C,IAAIpG,MAAM,kDAAiD,QA4DrE,GAxDAjG,QAAQC,IAAI,uCACZ5C,KAAKqR,MAAQ,IAAIvH,EAGjBnH,QAAQC,IAAI,sBAAuB5C,KAAKqR,MAAM7P,aAAakS,OAGrDZ,EAAuB,eAAA/P,EAAA6N,EAAA/E,IAAA4D,MAAG,SAAAkE,IAAA,OAAA9H,IAAAkC,MAAA,SAAA6F,GAAA,cAAAA,EAAAzD,KAAAyD,EAAA5E,MAAA,UAAA4E,EAAAzD,KAAA,EAEc,cAAlC1I,EAAK4J,MAAM7P,aAAakS,MAAqB,CAAAE,EAAA5E,KAAA,QACS,OAAtDrM,QAAQC,IAAI,0CAA0CgR,EAAA5E,KAAA,EAChDvH,EAAK4J,MAAM7P,aAAaqS,SAAQ,OAG1ClR,QAAQC,IAAI,mCAAoC6E,EAAK4J,MAAM7P,aAAakS,OAElC,YAAlCjM,EAAK4J,MAAM7P,aAAakS,QACxBjM,EAAK6J,aAAc,EACnB7J,EAAK8J,cAAe,EACpB9J,EAAKiK,WAAWgB,QAAQoB,UAAW,EACnCrM,EAAKiK,WAAWe,SAASqB,UAAW,EACpCrM,EAAKkL,aAAa,gDAAiD,WAGnElL,EAAKiK,WAAWgB,QAAQoB,UAAW,EAC/BrM,EAAKiK,WAAWqC,UAChBtM,EAAKiK,WAAWqC,QAAQD,UAAW,GAIvC3O,YAAW,WACPsC,EAAKoK,eACT,GAAG,MACN+B,EAAA5E,KAAA,gBAAA4E,EAAAzD,KAAA,EAAAyD,EAAAI,GAAAJ,EAAA,SAEDjR,QAAQ1B,MAAM,sCAAqC2S,EAAAI,IACnDvM,EAAKkL,aAAa,2DAA4D,WAC9ElL,EAAK8J,cAAe,EAAM,yBAAAqC,EAAAtD,OAAA,GAAAqD,EAAA,kBAEjC,kBAhC4B,OAAA5Q,EAAAmE,MAAA,KAAA1D,UAAA,KAmCvByQ,EAAqB,eAAAhJ,EAAA2F,EAAA/E,IAAA4D,MAAG,SAAAyE,IAAA,OAAArI,IAAAkC,MAAA,SAAAoG,GAAA,cAAAA,EAAAhE,KAAAgE,EAAAnF,MAAA,OAGwC,OAFlEkD,SAASkC,oBAAoB,QAASH,GACtC/B,SAASkC,oBAAoB,UAAWH,GACxC/B,SAASkC,oBAAoB,aAAcH,GAAuBE,EAAAhE,KAAA,EAAAgE,EAAAnF,KAAA,EAGxD8D,IAAyB,OAAAqB,EAAAnF,KAAA,gBAAAmF,EAAAhE,KAAA,EAAAgE,EAAAH,GAAAG,EAAA,SAE/BxR,QAAQ1B,MAAM,qCAAoCkT,EAAAH,IAClDvM,EAAKkL,aAAa,iDAAkD,WACpElL,EAAK8J,cAAe,EAAM,yBAAA4C,EAAA7D,OAAA,GAAA4D,EAAA,kBAEjC,kBAZ0B,OAAAjJ,EAAA/D,MAAA,KAAA1D,UAAA,KAeW,YAAlCxD,KAAKqR,MAAM7P,aAAakS,MAAmB,CAAAR,EAAAlE,KAAA,gBAAAkE,EAAAlE,KAAA,GACrC8D,IAAyB,QAAAI,EAAAlE,KAAA,iBAE/BhP,KAAK2S,aAAa,2CAA4C,WAC9DT,SAASE,iBAAiB,QAAS6B,EAAuB,CAAEI,MAAM,IAClEnC,SAASE,iBAAiB,UAAW6B,EAAuB,CAAEI,MAAM,IACpEnC,SAASE,iBAAiB,aAAc6B,EAAuB,CAAEI,MAAM,IAAQ,QAAAnB,EAAAlE,KAAA,iBAAAkE,EAAA/C,KAAA,GAAA+C,EAAAc,GAAAd,EAAA,SAInFvQ,QAAQ1B,MAAM,4BAA2BiS,EAAAc,IACrCf,EAAe,6BAA+BC,EAAAc,GAAMM,QAGpDpB,EAAAc,GAAMM,QAAQC,SAAS,kBACvBtB,EAAe,uDACRC,EAAAc,GAAMM,QAAQC,SAAS,mBAC9BtB,EAAe,+CAGnBjT,KAAK2S,aAAaM,EAAc,WAGhCtQ,QAAQC,IAAI,gBAAiB,CACzBuQ,UAAWC,UAAUD,UACrBE,cAAetJ,OAAOuJ,gBACtBC,mBAAoBxJ,OAAOC,eAAgBD,OAAOE,oBAClDuK,kBAA6B,QAAZxB,EAAEhT,KAAKqR,aAAK,IAAA2B,GAAc,QAAdA,EAAVA,EAAYxR,oBAAY,IAAAwR,OAAA,EAAxBA,EAA0BU,QAC9C,yBAAAR,EAAA5C,OAAA,GAAAuC,EAAA,mBAEV,WArIc,OAAAD,EAAA1L,MAAC,KAAD1D,UAAA,KAAAX,IAAA,kBAAAP,MAuIf,WAAkB,IAAAwF,EAAA,KAEd9H,KAAK0R,WAAa,CACde,SAAUP,SAASuC,eAAe,YAClC/B,QAASR,SAASuC,eAAe,WACjCV,QAAS7B,SAASuC,eAAe,WACjCC,OAAQxC,SAASuC,eAAe,UAChCE,QAAS,CAAC,GAIdzC,SAAS0C,iBAAiB,uBAAuB5T,SAAQ,SAAA6T,GACrD/M,EAAK4J,WAAWiD,QAAQE,EAAO/Q,IAAM+Q,EAGrC,IAAMC,EAAU5C,SAASuC,eAAe,GAAD7P,OAAIiQ,EAAO/Q,GAAE,WAChDgR,IACAA,EAAQC,YAAcF,EAAOvS,MAErC,IAGAtC,KAAK0R,WAAWsD,WAAa9C,SAAS0C,iBAAiB,cAC3D,GAAC,CAAA/R,IAAA,sBAAAP,MAED,WAAsB,IAAAmG,EAAA,KAElBsC,OAAOC,QAAQhL,KAAK0R,WAAWiD,SAAS3T,SAAQ,SAAAkK,GAAkB,IAAAE,EAAAD,EAAAD,EAAA,GAAhBpH,EAAEsH,EAAA,GAAQA,EAAA,GACjDgH,iBAAiB,SAAS,SAACpG,GAAC,OAAKvD,EAAKuJ,eAAelO,EAAIkI,EAAEiJ,OAAO3S,MAAM,GACnF,IAGAtC,KAAK0R,WAAWsD,WAAWhU,SAAQ,SAAAkU,GAC/BA,EAAI9C,iBAAiB,SAAS,kBAAM3J,EAAKkC,WAAWuK,EAAIC,QAAQzK,OAAO,GAC3E,IAGI1K,KAAK0R,WAAWqC,SAChB/T,KAAK0R,WAAWqC,QAAQ3B,iBAAiB,SAAS,kBAAM3J,EAAKoJ,eAAe,GAEpF,GAAC,CAAAhP,IAAA,wBAAAP,MAED,SAAsBwB,EAAIxB,GAAO,IAAA8S,EAAA,KAC7B,GAAKpV,KAAKsR,aAAgBtR,KAAKqR,QAASrR,KAAKwR,gBAA7C,CAEA,IAAMtO,EAAWC,WAAWb,GAGxBtC,KAAKyR,oBACL7F,aAAa5L,KAAKyR,oBAItBzR,KAAKyR,mBAAqBtM,YAAW,WAEjC,IAeMlC,EAfW,CACboH,MAAO,QACP1I,OAAQ,SACRC,QAAS,UACT0I,YAAa,cACbC,WAAY,aACZ,GAAM,WACN,GAAM,WACN,GAAM,WACN,aAAc,aACd,YAAa,YACb,cAAe,cACf,cAAe,eAGIzG,GACvB,GAAKb,EAEL,IAEI,GAAIa,EAAGsF,WAAW,KAAM,CACpB,IAAMiM,EAAeC,SAASxR,EAAG,IAAM,EACjCqG,2WAAQhD,CAAOiO,EAAK/D,MAAMjH,OAAOD,UACvCA,EAASkL,GAAgBnS,EACzBkS,EAAK/D,MAAM9N,SAAS,WAAY4G,EACpC,MACIiL,EAAK/D,MAAM9N,SAASN,EAAOC,EAEnC,CAAE,MAAOjC,GACL0B,QAAQ1B,MAAM,4BAA6BA,EAC/C,CACJ,GAAG,GA3CiE,CA4CxE,GAAC,CAAA4B,IAAA,iBAAAP,MAED,SAAewB,EAAIxB,GACf,GAAKtC,KAAKsR,cAAetR,KAAKwR,gBAA9B,CAEA,IAAMtO,EAAWC,WAAWb,GAGtBwS,EAAU5C,SAASuC,eAAe,GAAD7P,OAAId,EAAE,WACzCgR,IACAA,EAAQC,YAAc7R,EAAS2B,QAAQ,IAI3C7E,KAAKiS,sBAAsBnO,EAAIZ,EAXsB,CAYzD,GAAC,CAAAL,IAAA,aAAAP,MAED,SAAWiT,GAAY,IAAAC,EAAA,KACnB,GAAKxV,KAAKsR,YAAV,CAKA,IAAM5G,EAAS1K,KAAK2R,QAAQ4D,GAC5B,GAAK7K,EAAL,CAMI1K,KAAKyR,qBACL7F,aAAa5L,KAAKyR,oBAClBzR,KAAKyR,mBAAqB,MAG9B,IAEIzR,KAAKwR,iBAAkB,EAGvB,IAAMiE,EAAU,GAGhB1K,OAAOC,QAAQN,GAAQ1J,SAAQ,SAAAqK,GAAiB,IAAAqK,EAAAC,EAAAxK,EAAAE,EAAA,GAAfvH,EAAE6R,EAAA,GAAErT,EAAKqT,EAAA,GAChCd,EAAgC,QAA1Ba,EAAGF,EAAK9D,WAAWiD,eAAO,IAAAe,OAAA,EAAvBA,EAA0B5R,GACzC,GAAI+Q,EAAQ,CAERA,EAAOvS,MAAQA,EAEf,IAAMwS,EAAU5C,SAASuC,eAAe,GAAD7P,OAAId,EAAE,WACzCgR,IACAA,EAAQC,YAAc5R,WAAWb,GAAOuC,QAAQ,IAGpD4Q,EAAQ5O,KAAK,CAAE/C,GAAAA,EAAIxB,MAAAA,GACvB,CACJ,IAGAmT,EAAQzU,SAAQ,SAAA4U,GAAmB,IAAhB9R,EAAE8R,EAAF9R,GAAIxB,EAAKsT,EAALtT,MACnBkT,EAAKvD,sBAAsBnO,EAAIxB,EACnC,IAEAtC,KAAK2S,aAAa,kBAAD/N,OAAmB2Q,GAAc,WAGlDvV,KAAK6R,eAET,CAAE,MAAO5Q,GACL0B,QAAQ1B,MAAM,wBAAyBA,GACvCjB,KAAK2S,aAAa,uBAAwB,UAC9C,CAAE,QAEE3S,KAAKwR,iBAAkB,CAC3B,CA/CA,MAFI7O,QAAQkT,KAAK,WAADjR,OAAY2Q,EAAU,eAJtC,MAFIvV,KAAK2S,aAAa,gCAAiC,UAwD3D,GAAC,CAAA9P,IAAA,gBAAAP,OAAAwT,EAAAlF,EAAA/E,IAAA4D,MAED,SAAAsG,IAAA,IAAAC,EAAA,OAAAnK,IAAAkC,MAAA,SAAAkI,GAAA,cAAAA,EAAA9F,KAAA8F,EAAAjH,MAAA,UACShP,KAAKqR,MAAO,CAAF4E,EAAAjH,KAAA,QAE8D,OADzErM,QAAQkT,KAAK,6CACb7V,KAAK2S,aAAa,2CAA4C,WAAWsD,EAAAtI,OAAA,iBAOzE,GAPyEsI,EAAA9F,KAAA,EAQlD,eAHjB6F,EAAWhW,KAAKqR,MAAM7P,cAGfkS,MAAqB,CAAAuC,EAAAjH,KAAA,SACiC,OAA/DrM,QAAQC,IAAI,mDAAmDqT,EAAAjH,KAAA,GACzDgH,EAASnC,SAAQ,WAIJ,YAAnBmC,EAAStC,MAAmB,CAAAuC,EAAAjH,KAAA,SAEyD,OADrFrM,QAAQkT,KAAK,4CAA6CG,EAAStC,OACnE1T,KAAK2S,aAAa,uDAAwD,WAAWsD,EAAAtI,OAAA,kBAIzFhL,QAAQC,IAAI,kCAAmC,CAC3CyH,MAAOrK,KAAKqR,MAAMjH,OAAOC,MACzBqJ,MAAOsC,EAAStC,QAIpB1T,KAAKqR,MAAM6E,SAAS,EAAK,IACzBlW,KAAK2S,aAAa,wBAAyB,WAAWsD,EAAAjH,KAAA,iBAAAiH,EAAA9F,KAAA,GAAA8F,EAAAjC,GAAAiC,EAAA,SAGtDtT,QAAQ1B,MAAM,4BAA2BgV,EAAAjC,IACzChU,KAAK2S,aAAa,wBAA0BsD,EAAAjC,GAAMM,QAAS,WAAW,yBAAA2B,EAAA3F,OAAA,GAAAyF,EAAA,mBAE7E,WApCkB,OAAAD,EAAA5O,MAAC,KAAD1D,UAAA,KAAAX,IAAA,kBAAAP,OAAA6T,EAAAvF,EAAA/E,IAAA4D,MAsCnB,SAAA2G,IAAA,IAAAC,EAAA,YAAAxK,IAAAkC,MAAA,SAAAuI,GAAA,cAAAA,EAAAnG,KAAAmG,EAAAtH,MAAA,WACQhP,KAAKqR,MAAO,CAAFiF,EAAAtH,KAAA,QACsD,OAAhErM,QAAQC,IAAI,oDAAoD0T,EAAAtH,KAAA,EAC1DhP,KAAK6R,gBAAe,cAAAyE,EAAA3I,OAAA,iBAU1B,OANJ3N,KAAK2S,aAAa,wBAAyB,WAAW2D,EAAAnG,KAAA,EAIlDnQ,KAAKqR,MAAQ,IAAIvH,EAEjBwM,EAAAtH,KAAA,GACM,IAAIc,SAAQ,SAAAlB,GACd,IAAM2H,EAAa,WACXF,EAAKhF,MAAM7P,cAAkD,YAAlC6U,EAAKhF,MAAM7P,aAAakS,MACnD9E,IAEAzJ,WAAWoR,EAAY,GAE/B,EACAA,GACJ,IAAE,eAAAD,EAAAtH,KAAA,GAGIhP,KAAK6R,gBAAe,QAE1B7R,KAAK2S,aAAa,qBAAsB,WAAW2D,EAAAtH,KAAA,iBAIwB,MAJxBsH,EAAAnG,KAAA,GAAAmG,EAAAtC,GAAAsC,EAAA,SAGnD3T,QAAQ1B,MAAM,4BAA2BqV,EAAAtC,IACzChU,KAAK2S,aAAa,6BAA+B2D,EAAAtC,GAAMM,QAAS,WAAWgC,EAAAtC,GAAA,yBAAAsC,EAAAhG,OAAA,GAAA8F,EAAA,mBAGlF,WAnCoB,OAAAD,EAAAjP,MAAC,KAAD1D,UAAA,KAAAX,IAAA,oBAAAP,MAqCrB,WACI,MAAO,CACHkU,KAAM,CACFnM,MAAO,IACP1I,OAAQ,IACRC,QAAS,IACT0I,YAAa,GACbC,WAAY,IACZlD,GAAI,IACJC,GAAI,KACJC,GAAI,KACJ,aAAc,IACd,YAAa,IACb,cAAe,GACf,cAAe,IAEnBkP,MAAO,CACHpM,MAAO,IACP1I,OAAQ,IACRC,QAAS,IACT0I,YAAa,IACbC,WAAY,KACZlD,GAAI,IACJC,GAAI,KACJC,GAAI,KACJ,aAAc,IACd,YAAa,GACb,cAAe,GACf,cAAe,IAEnBmP,MAAO,CACHrM,MAAO,IACP1I,OAAQ,GACRC,QAAS,IACT0I,YAAa,GACbC,WAAY,IACZlD,GAAI,IACJC,GAAI,IACJC,GAAI,KACJ,aAAc,IACd,YAAa,GACb,cAAe,GACf,cAAe,IAG3B,GAAC,CAAA1E,IAAA,eAAAP,MAED,SAAagS,GAA4B,IAAnBqC,EAAKnT,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,UACtBxD,KAAK0R,WAAWkF,WAChB5W,KAAK0R,WAAWkF,SAAS7B,YAAcT,EACvCtU,KAAK0R,WAAWkF,SAASC,MAAMF,MAAQA,GAE3ChU,QAAQC,IAAI,YAADgC,OAAa0P,GAC5B,GAAC,CAAAzR,IAAA,WAAAP,MAED,SAASgS,GACL,GAAItU,KAAK0R,WAAWoF,QAAS,CACzB,IAAMC,EAAW7E,SAAS8E,cAAc,OAKxC,IAJAD,EAAShC,YAAc,IAAHnQ,QAAO,IAAIqS,MAAOC,cAAa,MAAAtS,OAAK0P,GACxDtU,KAAK0R,WAAWoF,QAAQK,QAAQJ,GAGzB/W,KAAK0R,WAAWoF,QAAQM,SAAS3T,OAAS,IAC7CzD,KAAK0R,WAAWoF,QAAQO,YAAYrX,KAAK0R,WAAWoF,QAAQQ,UAEpE,CACA3U,QAAQ4U,MAAM,WAAD3S,OAAY0P,GAC7B,IA1eJxI,GAAAiF,EAAA/E,EAAAC,UAAAH,GAAAf,OAAA4B,eAAAX,EAAA,aAAAc,UAAA,IAAAd,EAAA,IAAAA,EAAAF,EA4VuBqK,EAFlBL,EA9TelD,EAFfP,CAgdA,CAxeuB,GCCA,YAAxBH,SAASC,WACTD,SAASE,iBAAiB,oBAAoB,WAC1C,IAAIhB,CACR,IAEA,IAAIA,EAIRrH,OAAOyN,IAAM,CACTpG,gBAAAA","sources":["webpack://dogbox/./node_modules/evb/src/event-bus.js","webpack://dogbox/./src/js/events.js","webpack://dogbox/./src/js/models/LFGlottalSource.js","webpack://dogbox/./src/js/models/NoiseGenerator.js","webpack://dogbox/./src/js/models/FormantFilterBank.js","webpack://dogbox/./src/js/models/EnvelopeGenerator.js","webpack://dogbox/./src/js/models/DogSynthesizer.js","webpack://dogbox/./src/js/controllers/SynthController.js","webpack://dogbox/./src/js/app.js"],"sourcesContent":["// Simple event bus for pub/sub communication\n/**\n * EventBus provides a minimal publish/subscribe API for decoupled communication.\n * @class\n */\nexport class EventBus {\n    /**\n     * Create a new EventBus instance.\n     */\n    constructor() {\n        this.listeners = new Map()\n    }\n\n    /**\n     * Subscribe to an event\n     * @param {string} event - Event name\n     * @param {Function} callback - Event handler function\n     * @returns {Function} Unsubscribe function\n     */\n    on(event, callback) {\n        if (!this.listeners.has(event)) {\n            this.listeners.set(event, new Set())\n        }\n        this.listeners.get(event).add(callback)\n        // Return unsubscribe function\n        return () => {\n            const callbacks = this.listeners.get(event)\n            if (callbacks) {\n                callbacks.delete(callback)\n                if (callbacks.size === 0) {\n                    this.listeners.delete(event)\n                }\n            }\n        }\n    }\n\n    /**\n     * Emit an event\n     * @param {string} event - Event name\n     * @param {*} data - Event data\n     */\n    emit(event, data) {\n        // Optionally log or handle errors here\n        const callbacks = this.listeners.get(event)\n        if (callbacks) {\n            callbacks.forEach(callback => {\n                try {\n                    callback(data)\n                } catch (error) {\n                    // Optionally handle listener errors\n                    // console.error(`Error in event listener for \"${event}\":`, error)\n                }\n            })\n        }\n    }\n\n    /**\n     * Remove all listeners for an event or all events\n     * @param {string} [event] - Event name (optional, removes all if not specified)\n     */\n    removeAllListeners(event) {\n        if (event) {\n            this.listeners.delete(event)\n        } else {\n            this.listeners.clear()\n        }\n    }\n}\n\n// Singleton instance for convenience\nexport const eventBus = new EventBus()\n\n// Direct API for convenience (for legacy/common usage)\nexport const on = eventBus.on.bind(eventBus)\nexport const off = (event, callback) => {\n    const callbacks = eventBus.listeners.get(event)\n    if (callbacks) {\n        callbacks.delete(callback)\n        if (callbacks.size === 0) {\n            eventBus.listeners.delete(event)\n        }\n    }\n}\nexport const emit = eventBus.emit.bind(eventBus)\n\n// For testability: reset all listeners\nexport const _reset = () => eventBus.removeAllListeners()\n\n// Usage:\n// import { eventBus, on, off, emit, _reset } from 'evb/src/event-bus.js'\n// const unsubscribe = on('my:event', data => { ... })\n// emit('my:event', { foo: 'bar' })\n// off('my:event', unsubscribe)","import { EventBus } from 'evb';\n\nexport const events = {\n  // System events\n  APP_INIT: 'app:init',\n  AUDIO_READY: 'audio:ready',\n  \n  // Playback events\n  NOTE_ON: 'note:on',\n  NOTE_OFF: 'note:off',\n  \n  // Parameter change events\n  PARAM_CHANGE: 'param:change',\n  PRESET_LOAD: 'preset:load',\n  \n  // UI events\n  UI_READY: 'ui:ready',\n  UI_ERROR: 'ui:error'\n};\n\n// Create and export the event bus instance\nexport const eventBus = new EventBus();\n\n// Debug all events in development\nif (process.env.NODE_ENV === 'development') {\n  Object.values(events).forEach(event => {\n    eventBus.on(event, (data) => {\n      console.log(`[Event] ${event}`, data);\n    });\n  });\n}\n","import { eventBus, events } from '../events.js';\n\nexport class LFGlottalSource {\n    constructor(audioContext) {\n        this.audioContext = audioContext;\n        this.rd = 0.8; // Return phase duration (0-1)\n        this.jitter = 0.0; // Pitch jitter (0-1)\n        this.shimmer = 0.0; // Amplitude shimmer (0-1)\n        this.f0 = 220; // Fundamental frequency in Hz\n        \n        // Create audio nodes\n        this.osc = audioContext.createOscillator();\n        this.osc.type = 'sawtooth'; // Changed to sawtooth for more harmonic content\n        this.osc.frequency.setValueAtTime(this.f0, audioContext.currentTime);\n        \n        // Create gain for amplitude control\n        this.gain = audioContext.createGain();\n        this.gain.gain.value = 0;\n        \n        // Connect nodes\n        this.osc.connect(this.gain);\n        \n        // Start oscillator\n        this.osc.start();\n        \n        // Set initial volume\n        this.gain.gain.value = 0.5;\n        \n        // Track active notes\n        this.activeNotes = new Map();\n        \n        // Setup event listeners\n        this.setupEventListeners();\n        \n        console.log('LFGlottalSource initialized');\n    }\n    \n    setupEventListeners() {\n        // Only log parameter changes in development\n        const debug = false;\n        \n        eventBus.on(events.PARAM_CHANGE, ({ param, value }) => {\n            if (debug) console.log(`LFGlottalSource: ${param} = ${value}`);\n            \n            try {\n                const numValue = parseFloat(value);\n                const now = this.audioContext.currentTime;\n                \n                switch (param) {\n                    case 'pitch':\n                        this.f0 = numValue;\n                        this.osc.frequency.cancelScheduledValues(now);\n                        this.osc.frequency.setValueAtTime(numValue, now);\n                        break;\n                    case 'jitter':\n                        this.jitter = numValue;\n                        break;\n                    case 'shimmer':\n                        this.shimmer = numValue;\n                        break;\n                    case 'amp':\n                    case 'gain':\n                        // Direct gain control\n                        this.gain.gain.cancelScheduledValues(now);\n                        this.gain.gain.setValueAtTime(numValue, now);\n                        break;\n                    case 'amp-attack':\n                    case 'amp-decay':\n                    case 'amp-sustain':\n                    case 'amp-release':\n                        if (this.envelope?.setParam) {\n                            this.envelope.setParam(param, numValue);\n                        }\n                        break;\n                }\n            } catch (error) {\n                if (debug) console.error(`Error handling ${param}:`, error);\n            }\n        });\n        \n        eventBus.on(events.NOTE_ON, (event = {}) => {\n            const { frequency, velocity = 0.7, time, id } = event;\n            this.noteOn(time, velocity, frequency, id);\n        });\n        \n        eventBus.on(events.NOTE_OFF, (event = {}) => {\n            const { time, id } = event;\n            this.noteOff(time, id);\n        });\n    }\n    \n    setFrequency(f0) {\n        this.f0 = f0;\n        this.osc.frequency.setValueAtTime(\n            f0 * (1 + (Math.random() * 2 - 1) * this.jitter), \n            this.audioContext.currentTime\n        );\n    }\n    \n    connect(destination) {\n        this.gain.connect(destination);\n    }\n    \n    disconnect() {\n        this.gain.disconnect();\n    }\n    \n    noteOn(time = this.audioContext.currentTime, velocity = 1.0, frequency, id) {\n        try {\n            if (!this.audioContext) {\n                console.error('AudioContext not available');\n                return;\n            }\n            \n            const now = this.audioContext.currentTime;\n            const startTime = Math.max(now, time);\n            \n            // Create a new gain node for this note\n            const noteGain = this.audioContext.createGain();\n            noteGain.gain.value = 0;\n            \n            // Connect the oscillator through this gain node\n            this.osc.disconnect();\n            this.osc.connect(noteGain);\n            noteGain.connect(this.gain);\n            \n            // Set frequency if provided, otherwise use current\n            if (frequency) {\n                this.setFrequency(frequency);\n            } else {\n                frequency = this.f0;\n            }\n            \n            // Apply shimmer to amplitude\n            const shimmerFactor = 1 + (Math.random() * 2 - 1) * (this.shimmer || 0);\n            const amp = Math.min(1, velocity * shimmerFactor);\n            \n            console.log(`NoteOn [${id || 'unknown'}]: time=${time.toFixed(3)}, freq=${frequency}, vel=${velocity}, amp=${amp.toFixed(3)}`);\n            \n            // Schedule the note on\n            noteGain.gain.cancelScheduledValues(now);\n            noteGain.gain.setValueAtTime(0, now);\n            \n            if (startTime > now) {\n                // If starting in the future, set a ramp\n                noteGain.gain.linearRampToValueAtTime(0, startTime);\n                noteGain.gain.linearRampToValueAtTime(amp, startTime + 0.01);\n            } else {\n                // Start immediately\n                noteGain.gain.linearRampToValueAtTime(amp, now + 0.01);\n            }\n            \n            // Store the note\n            if (id) {\n                this.activeNotes.set(id, {\n                    gain: noteGain,\n                    startTime: now\n                });\n            }\n            \n        } catch (error) {\n            console.error('Error in noteOn:', error);\n        }\n    }\n    \n    noteOff(time = this.audioContext?.currentTime, id) {\n        try {\n            if (!this.audioContext) {\n                console.error('AudioContext not available in noteOff');\n                return;\n            }\n            \n            const now = this.audioContext.currentTime;\n            const releaseTime = Math.max(now, time || now);\n            \n            if (id && this.activeNotes.has(id)) {\n                // Handle specific note\n                const note = this.activeNotes.get(id);\n                const gain = note.gain.gain;\n                const currentValue = gain.value;\n                \n                console.log(`NoteOff [${id}]: time=${releaseTime.toFixed(3)}, currentValue=${currentValue.toFixed(3)}`);\n                \n                // Schedule the release\n                gain.cancelScheduledValues(now);\n                gain.setValueAtTime(currentValue, now);\n                \n                if (releaseTime > now) {\n                    // If releasing in the future, schedule it\n                    gain.linearRampToValueAtTime(currentValue, releaseTime);\n                    gain.linearRampToValueAtTime(0, releaseTime + 0.1);\n                } else {\n                    // Release immediately\n                    gain.linearRampToValueAtTime(0, now + 0.1);\n                }\n                \n                // Clean up after release\n                setTimeout(() => {\n                    if (this.activeNotes.has(id)) {\n                        const noteToClean = this.activeNotes.get(id);\n                        noteToClean.gain.disconnect();\n                        this.activeNotes.delete(id);\n                    }\n                }, (releaseTime - now + 0.15) * 1000); // Slightly longer than the release time\n                \n            } else if (!id) {\n                // Fallback: if no ID, use the main gain\n                const gain = this.gain.gain;\n                const currentValue = gain.value;\n                \n                console.log(`NoteOff [all]: time=${releaseTime.toFixed(3)}, currentValue=${currentValue.toFixed(3)}`);\n                \n                // Schedule the release\n                gain.cancelScheduledValues(now);\n                gain.setValueAtTime(currentValue, now);\n                gain.linearRampToValueAtTime(0, releaseTime + 0.1);\n            }\n            \n        } catch (error) {\n            console.error('Error in noteOff:', error);\n        }\n    }\n}\n","import { eventBus, events } from '../events.js';\n\nexport class NoiseGenerator {\n    constructor(audioContext) {\n        this.audioContext = audioContext;\n        this.bufferSize = 4096;\n        this.noiseBuffer = this.createNoiseBuffer();\n        this.gain = audioContext.createGain();\n        this.gain.gain.value = 0;\n        \n        // Create noise source\n        this.noise = audioContext.createBufferSource();\n        this.noise.buffer = this.noiseBuffer;\n        this.noise.loop = true;\n        \n        // Create filter for noise color\n        this.filter = audioContext.createBiquadFilter();\n        this.filter.type = 'bandpass';\n        this.filter.frequency.setValueAtTime(1000, audioContext.currentTime);\n        this.filter.Q.value = 1.0; // Slightly higher Q for more pronounced effect\n        \n        // Set initial gain to 0 (will be controlled by note events)\n        this.gain.gain.value = 0;\n        \n        // Connect nodes\n        this.noise.connect(this.filter);\n        this.filter.connect(this.gain);\n        \n        // Start noise source\n        this.noise.start();\n        \n        // Setup event listeners\n        this.setupEventListeners();\n    }\n    \n    setupEventListeners() {\n        // Only log parameter changes in development\n        const debug = false;\n        \n        eventBus.on(events.PARAM_CHANGE, ({ param, value }) => {\n            if (debug) console.log(`NoiseGenerator: ${param} = ${value}`);\n            \n            try {\n                const numValue = parseFloat(value);\n                const now = this.audioContext.currentTime;\n                \n                switch (param) {\n                    case 'breathiness':\n                        this.gain.gain.cancelScheduledValues(now);\n                        this.gain.gain.setValueAtTime(numValue, now);\n                        break;\n                    case 'noiseColor':\n                        this.filter.frequency.cancelScheduledValues(now);\n                        this.filter.frequency.setValueAtTime(numValue, now);\n                        break;\n                    case 'noiseQ':\n                    case 'q':\n                        this.filter.Q.cancelScheduledValues(now);\n                        this.filter.Q.setValueAtTime(Math.max(0.1, numValue), now);\n                        break;\n                    case 'amp':\n                    case 'gain':\n                        this.gain.gain.cancelScheduledValues(now);\n                        this.gain.gain.setValueAtTime(numValue, now);\n                        break;\n                }\n            } catch (error) {\n                if (debug) console.error(`Error handling ${param}:`, error);\n            }\n        });\n        \n        eventBus.on(events.NOTE_ON, (event = {}) => {\n            const { velocity = 0.5, time } = event;\n            this.noteOn(time, velocity);\n        });\n        \n        eventBus.on(events.NOTE_OFF, (event = {}) => {\n            const { time } = event;\n            this.noteOff(time);\n        });\n    }\n    \n    createNoiseBuffer() {\n        const buffer = this.audioContext.createBuffer(\n            1, \n            this.bufferSize, \n            this.audioContext.sampleRate\n        );\n        \n        const output = buffer.getChannelData(0);\n        for (let i = 0; i < this.bufferSize; i++) {\n            output[i] = Math.random() * 2 - 1; // White noise\n        }\n        \n        return buffer;\n    }\n    \n    setFrequency(freq) {\n        this.filter.frequency.setValueAtTime(freq, this.audioContext.currentTime);\n    }\n    \n    setQ(q) {\n        this.filter.Q.setValueAtTime(q, this.audioContext.currentTime);\n    }\n    \n    setLevel(level) {\n        this.gain.gain.setValueAtTime(level, this.audioContext.currentTime);\n    }\n    \n    connect(destination) {\n        this.gain.connect(destination);\n    }\n    \n    disconnect() {\n        this.gain.disconnect();\n    }\n    \n    noteOn(time = this.audioContext.currentTime, velocity = 0.5) {\n        const now = this.audioContext.currentTime;\n        const startTime = Math.max(now, time);\n        const gain = this.gain.gain;\n        \n        // Schedule the note on\n        gain.cancelScheduledValues(now);\n        gain.setValueAtTime(0, now);\n        \n        if (startTime > now) {\n            // If starting in the future, set a ramp\n            gain.linearRampToValueAtTime(0, startTime);\n            gain.linearRampToValueAtTime(velocity, startTime + 0.01);\n        } else {\n            // Start immediately\n            gain.linearRampToValueAtTime(velocity, now + 0.01);\n        }\n    }\n    \n    noteOff(time = this.audioContext.currentTime) {\n        const now = this.audioContext.currentTime;\n        const releaseTime = Math.max(now, time);\n        const gain = this.gain.gain;\n        \n        // Get current value at the release time\n        const currentValue = gain.value;\n        \n        // Schedule the release\n        gain.cancelScheduledValues(now);\n        gain.setValueAtTime(currentValue, now);\n        \n        if (releaseTime > now) {\n            // If releasing in the future, schedule it\n            gain.linearRampToValueAtTime(currentValue, releaseTime);\n            gain.linearRampToValueAtTime(0, releaseTime + 0.1);\n        } else {\n            // Release immediately\n            gain.linearRampToValueAtTime(0, now + 0.1);\n        }\n    }\n    \n    // For backward compatibility\n    trigger(velocity = 0.5, duration = 1.0) {\n        const now = this.audioContext.currentTime;\n        this.noteOn(now, velocity);\n        this.noteOff(now + duration);\n    }\n}\n","import { eventBus, events } from '../events.js';\n\nexport class FormantFilterBank {\n    constructor(audioContext) {\n        this.audioContext = audioContext;\n        this.filters = [];\n        this.gains = [];\n        this.mix = 0.5;\n        \n        // Create input and output nodes\n        this.input = this.audioContext.createGain();\n        this.output = this.audioContext.createGain();\n        \n        // Create formant filters (F1-F4)\n        for (let i = 0; i < 4; i++) {\n            // Create bandpass filter for each formant\n            const filter = this.audioContext.createBiquadFilter();\n            filter.type = 'bandpass';\n            filter.Q.value = 10;\n            \n            // Create gain for each formant\n            const gain = this.audioContext.createGain();\n            gain.gain.value = 0.25; // Default equal gain for all formants\n            \n            // Connect filter to gain\n            filter.connect(gain);\n            \n            this.filters.push(filter);\n            this.gains.push(gain);\n        }\n        \n        // Set default formant frequencies (vowel \"ah\")\n        this.setFormants(800, 1200, 2500, 3500);\n        \n        // Create dry/wet mixer\n        this.dryGain = this.audioContext.createGain();\n        this.wetGain = this.audioContext.createGain();\n        \n        // Connect input to all filters in parallel\n        this.filters.forEach(filter => {\n            this.input.connect(filter);\n        });\n        \n        // Connect all gains to wet gain\n        this.gains.forEach(gain => {\n            gain.connect(this.wetGain);\n        });\n        \n        // Connect input to dry gain (for dry/wet mix)\n        this.input.connect(this.dryGain);\n        \n        // Connect dry and wet gains to output\n        this.dryGain.connect(this.output);\n        this.wetGain.connect(this.output);\n        \n        // Set initial gains\n        this.setMix(this.mix);\n        \n        // Setup event listeners\n        this.setupEventListeners();\n    }\n    \n    setupEventListeners() {\n        eventBus.on(events.PARAM_CHANGE, ({ param, value }) => {\n            if (param === 'formants') {\n                this.setFormants(...value);\n            } else if (param === 'formantQs') {\n                this.setBandwidths(...value);\n            } else if (param === 'filterMix') {\n                this.setMix(value);\n            }\n        });\n    }\n    \n    setFormants(f1, f2, f3, f4) {\n        const freqs = [f1, f2, f3, f4];\n        freqs.forEach((freq, i) => {\n            if (this.filters[i]) {\n                this.filters[i].frequency.setValueAtTime(freq, this.audioContext.currentTime);\n            }\n        });\n    }\n    \n    setBandwidths(bw1, bw2, bw3, bw4) {\n        const bws = [bw1, bw2, bw3, bw4];\n        bws.forEach((bw, i) => {\n            if (this.filters[i]) {\n                this.filters[i].Q.setValueAtTime(this.bwToQ(bw), this.audioContext.currentTime);\n            }\n        });\n    }\n    \n    bwToQ(bw) {\n        // Convert bandwidth in octaves to Q value\n        const w0 = 2 * Math.PI * 1000 / this.audioContext.sampleRate; // Center frequency\n        const A = Math.pow(2, bw / 2);\n        return Math.sqrt(A) / (A - 1);\n    }\n    \n    setGains(g1, g2, g3, g4) {\n        const gains = [g1, g2, g3, g4];\n        gains.forEach((gain, i) => {\n            if (this.gains[i]) {\n                this.gains[i].gain.setValueAtTime(gain, this.audioContext.currentTime);\n            }\n        });\n    }\n    \n    setMix(level) {\n        this.mix = level;\n        const now = this.audioContext.currentTime;\n        this.dryGain.gain.setValueAtTime(1 - level, now);\n        this.wetGain.gain.setValueAtTime(level, now);\n    }\n    \n    connect(destination) {\n        if (destination instanceof AudioNode) {\n            this.output.connect(destination);\n        } else if (destination._input) {\n            // Handle case where destination is a custom node with _input\n            this.output.connect(destination._input);\n        } else {\n            throw new Error('Cannot connect to destination: not an AudioNode');\n        }\n        return destination;\n    }\n    \n    disconnect() {\n        this.output.disconnect();\n    }\n    \n    get numberOfInputs() { return 1; }\n    get numberOfOutputs() { return 1; }\n    \n    connectInput(source) {\n        // Connect source to all filters (in parallel)\n        this.filters.forEach(filter => {\n            source.connect(filter);\n        });\n        \n        // Also connect to dry path\n        source.connect(this.dryGain);\n    }\n    \n    disconnect() {\n        this.filters.forEach(filter => filter.disconnect());\n        this.gains.forEach(gain => gain.disconnect());\n        if (this.dryGain) this.dryGain.disconnect();\n        if (this.wetGain) this.wetGain.disconnect();\n        if (this.mixer) this.mixer.disconnect();\n    }\n}\n","import { eventBus, events } from '../events.js';\n\nexport class EnvelopeGenerator {\n    constructor() {\n        this.attack = 0.01;\n        this.decay = 0.1;\n        this.sustain = 0.5;\n        this.release = 0.2;\n        \n        // Setup event listeners\n        this.setupEventListeners();\n    }\n    \n    setupEventListeners() {\n        eventBus.on(events.PARAM_CHANGE, ({ param, value }) => {\n            if (param.startsWith('amp-')) {\n                const paramName = param.split('-')[1];\n                this[paramName] = value;\n            }\n        });\n    }\n    \n    setADSR(attack, decay, sustain, release) {\n        this.attack = attack;\n        this.decay = decay;\n        this.sustain = sustain;\n        this.release = release;\n    }\n    \n    applyEnvelope(param, startValue, peakValue, sustainValue, startTime, duration) {\n        const audioContext = param.context;\n        const now = audioContext.currentTime;\n        \n        // Calculate times\n        const attackEnd = startTime + this.attack;\n        const decayEnd = attackEnd + this.decay;\n        const releaseStart = startTime + duration - this.release;\n        \n        // Set initial value\n        param.cancelScheduledValues(now);\n        param.setValueAtTime(startValue, startTime);\n        \n        // Attack phase\n        param.linearRampToValueAtTime(peakValue, attackEnd);\n        \n        // Decay phase\n        param.linearRampToValueAtTime(sustainValue, decayEnd);\n        \n        // Sustain phase (if there is one)\n        if (releaseStart > decayEnd) {\n            param.linearRampToValueAtTime(sustainValue, releaseStart);\n        }\n        \n        // Release phase\n        param.linearRampToValueAtTime(0, startTime + duration);\n        \n        return startTime + duration;\n    }\n}\n","import { eventBus, events } from '../events.js';\nimport { LFGlottalSource } from './LFGlottalSource.js';\nimport { NoiseGenerator } from './NoiseGenerator.js';\nimport { FormantFilterBank } from './FormantFilterBank.js';\nimport { EnvelopeGenerator } from './EnvelopeGenerator.js';\n\n// Debug logging\nconst debug = (message, ...args) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.log(`[DogSynthesizer] ${message}`, ...args);\n  }\n};\n\nexport class DogSynthesizer {\n    constructor() {\n        try {\n            debug('Initializing DogSynthesizer...');\n            \n            // Check for Web Audio API support\n            if (!window.AudioContext && !window.webkitAudioContext) {\n                throw new Error('Web Audio API is not supported in this browser');\n            }\n            \n            // Create audio context\n            const AudioContext = window.AudioContext || window.webkitAudioContext;\n            this.audioContext = new AudioContext();\n            debug('AudioContext created');\n            \n            // Initialize components\n            this.envelope = new EnvelopeGenerator();\n            debug('EnvelopeGenerator initialized');\n            \n            this.glottis = new LFGlottalSource(this.audioContext);\n            debug('LFGlottalSource initialized');\n            \n            this.noise = new NoiseGenerator(this.audioContext);\n            debug('NoiseGenerator initialized');\n            \n            this.formants = new FormantFilterBank(this.audioContext);\n            debug('FormantFilterBank initialized');\n            \n            // Output gain\n            this.output = this.audioContext.createGain();\n            this.output.gain.value = 0.5;\n            debug('Output gain node created');\n            \n            // Create a gain node for mixing glottis and noise\n            this.mixer = this.audioContext.createGain();\n            this.mixer.gain.value = 1.0;\n            \n            // Connect components with proper routing\n            this.glottis.connect(this.mixer);\n            this.noise.connect(this.mixer);\n            this.mixer.connect(this.formants.input);\n            this.formants.connect(this.output);\n            this.output.connect(this.audioContext.destination);\n            debug('Audio nodes connected');\n            \n            // Set initial volume to a safe level\n            this.output.gain.value = 0.5;\n            \n            // Keep track of active notes\n            this.activeNotes = new Set();\n            \n        } catch (error) {\n            console.error('Error initializing DogSynthesizer:', error);\n            throw error; // Re-throw to be caught by the controller\n        }\n        \n        // Default parameters\n        this.params = {\n            pitch: 220,\n            jitter: 0.05,\n            shimmer: 0.1,\n            breathiness: 0.2,\n            noiseColor: 1000,\n            formants: [800, 1200, 2500, 3500],\n            formantQs: [10, 8, 6, 4],\n            'amp-attack': 0.01,\n            'amp-decay': 0.1,\n            'amp-sustain': 0.5,\n            'amp-release': 0.2\n        };\n        \n        // Apply initial parameters\n        this.updateParams();\n        \n        // Setup event listeners\n        this.setupEventListeners();\n        \n        // Notify that audio is ready\n        eventBus.emit(events.AUDIO_READY);\n    }\n    \n    setupEventListeners() {\n        // Forward parameter changes to the event bus\n        eventBus.on(events.PARAM_CHANGE, ({ param, value }) => {\n            this.setParam(param, value);\n        });\n        \n        // Handle preset loading\n        eventBus.on(events.PRESET_LOAD, (preset) => {\n            this.loadPreset(preset);\n        });\n    }\n    \n    // Set a parameter value\n    setParam(param, value) {\n        // Only log parameter changes in development\n        const debug = false;\n        \n        if (!this.params.hasOwnProperty(param)) {\n            if (debug) console.warn(`Unknown parameter: ${param}`);\n            return;\n        }\n        \n        try {\n            // Convert to number if it's a numeric parameter\n            const numValue = typeof this.params[param] === 'number' ? parseFloat(value) : value;\n            const currentValue = this.params[param];\n            \n            // Skip if value hasn't changed (within floating point precision)\n            if (typeof numValue === 'number' && Math.abs(numValue - currentValue) < 0.0001) {\n                return;\n            }\n            \n            this.params[param] = numValue;\n            if (debug) console.log(`Setting parameter: ${param} = ${numValue}`);\n            \n            // Direct parameter handling for performance\n            const now = this.audioContext?.currentTime || 0;\n            \n            // Handle common parameters directly\n            switch (param) {\n                case 'pitch':\n                case 'jitter':\n                case 'shimmer':\n                    if (this.glottis) {\n                        this.glottis.setParam(param, numValue);\n                    }\n                    break;\n                    \n                case 'breathiness':\n                case 'noiseColor':\n                case 'noiseQ':\n                case 'q':\n                    if (this.noise) {\n                        this.noise.setParam(param, numValue);\n                    }\n                    break;\n                    \n                case 'formants':\n                    if (this.formants) {\n                        this.formants.setParam(param, numValue);\n                        this.updateFormants();\n                    }\n                    break;\n                    \n                case 'amp':\n                case 'gain':\n                    if (this.output) {\n                        this.output.gain.cancelScheduledValues(now);\n                        this.output.gain.setValueAtTime(numValue, now);\n                    }\n                    break;\n                    \n                default:\n                    // For envelope parameters and others\n                    if (this.envelope?.setParam) {\n                        this.envelope.setParam(param, numValue);\n                    }\n            }\n            \n            // Emit the parameter change event\n            eventBus.emit(events.PARAM_CHANGE, { param, value: numValue });\n            \n        } catch (error) {\n            if (debug) console.error(`Error setting ${param}:`, error);\n        }\n    }\n    \n    // Update all parameters without triggering events\n    updateParams() {\n        // Update all parameters directly without emitting events\n        // to prevent infinite loops\n        Object.entries(this.params).forEach(([param, value]) => {\n            // Update the glottis, noise, and formants directly\n            if (this.glottis && typeof this.glottis.setParam === 'function') {\n                this.glottis.setParam(param, value);\n            }\n            if (this.noise && typeof this.noise.setParam === 'function') {\n                this.noise.setParam(param, value);\n            }\n            if (this.formants && typeof this.formants.setParam === 'function') {\n                this.formants.setParam(param, value);\n            }\n        });\n        \n        // Update formants specifically if needed\n        this.updateFormants();\n    }\n    \n    // Update formant-related parameters\n    updateFormants() {\n        eventBus.emit(events.PARAM_CHANGE, {\n            param: 'formants',\n            value: this.params.formants\n        });\n        \n        eventBus.emit(events.PARAM_CHANGE, {\n            param: 'formantQs',\n            value: this.params.formantQs\n        });\n    }\n    \n    // Load a preset\n    loadPreset(preset) {\n        Object.entries(preset).forEach(([param, value]) => {\n            if (this.params.hasOwnProperty(param)) {\n                this.params[param] = value;\n                eventBus.emit(events.PARAM_CHANGE, { param, value });\n            }\n        });\n    }\n    \n    // Play a note\n    playNote(duration = 1.0, velocity = 0.7) {\n        try {\n            if (!this.audioContext) {\n                console.error('Cannot play note: AudioContext not available');\n                return;\n            }\n            \n            const now = this.audioContext.currentTime;\n            const endTime = now + Math.max(0.1, duration); // Ensure minimum duration\n            const noteId = `${now}-${Math.random().toString(36).substr(2, 9)}`;\n            \n            console.log(`Playing note [${noteId}]: duration=${duration}s, velocity=${velocity}, pitch=${this.params.pitch}Hz`);\n            \n            // Store active note\n            this.activeNotes.add(noteId);\n            \n            // Emit note on with current time\n            eventBus.emit(events.NOTE_ON, {\n                frequency: this.params.pitch,\n                velocity,\n                time: now,\n                id: noteId\n            });\n            \n            // Schedule note off using audio context timing\n            const noteOffEvent = () => {\n                if (this.activeNotes.has(noteId)) {\n                    eventBus.emit(events.NOTE_OFF, {\n                        time: this.audioContext.currentTime,\n                        id: noteId\n                    });\n                    this.activeNotes.delete(noteId);\n                }\n            };\n            \n            // Schedule the note off\n            const timeout = setTimeout(noteOffEvent, (endTime - now) * 1000);\n            \n            // Store timeout for cleanup\n            this.activeNotes.add({\n                id: noteId,\n                timeout: timeout,\n                cancel: () => clearTimeout(timeout)\n            });\n            \n            console.log(`Scheduled note off [${noteId}] at: ${endTime.toFixed(3)}s`);\n            \n        } catch (error) {\n            console.error('Error in playNote:', error);\n        }\n    }\n    \n    // Connect to audio destination\n    connect(destination) {\n        this.output.connect(destination);\n    }\n    \n    // Disconnect all audio nodes\n    disconnect() {\n        this.glottis.disconnect();\n        this.noise.disconnect();\n        this.formants.disconnect();\n        this.output.disconnect();\n    }\n}\n","import { eventBus, events } from '../events.js';\nimport { DogSynthesizer } from '../models/DogSynthesizer.js';\n\nexport class SynthController {\n    constructor() {\n        this.synth = null;\n        this.initialized = false;\n        this.initializing = false;\n        this.isLoadingPreset = false;\n        this.paramUpdateTimeout = null;\n        this.uiElements = {};\n        this.presets = this.getDefaultPresets();\n        \n        // Bind methods\n        this.loadPreset = this.loadPreset.bind(this);\n        this.playTestSound = this.playTestSound.bind(this);\n        this.initAudio = this.initAudio.bind(this);\n        this.initialize = this.initialize.bind(this);\n        this.onSliderChange = this.onSliderChange.bind(this);\n        this.updateSynthFromSlider = this.updateSynthFromSlider.bind(this);\n        \n        // Initialize when DOM is ready\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', () => this.initialize());\n        } else {\n            this.initialize();\n        }\n    }\n    \n    async initialize() {\n        try {\n            this.setupUIElements();\n            this.setupEventListeners();\n            \n            // Initialize audio on user interaction\n            this.uiElements.startBtn.addEventListener('click', () => this.initAudio());\n            this.uiElements.testBtn.addEventListener('click', () => this.playTestSound());\n            \n            // Set initial UI state\n            this.updateStatus('Click Initialize to begin', '#4facfe');\n            \n            // Notify UI is ready\n            eventBus.emit(events.UI_READY);\n            \n        } catch (error) {\n            console.error('Error initializing controller:', error);\n            this.updateStatus('Initialization failed. Check console for errors.', '#e74c3c');\n        }\n    }\n    \n    async initAudio() {\n        // Prevent multiple initializations\n        if (this.initializing) return;\n        this.initializing = true;\n        \n        try {\n            this.updateStatus('Initializing audio...', '#4facfe');\n            \n            // Log browser info for debugging\n            console.log('Browser info:', {\n                userAgent: navigator.userAgent,\n                secureContext: window.isSecureContext,\n                hasAudioContext: !!(window.AudioContext || window.webkitAudioContext),\n                location: window.location.href\n            });\n            \n            // Check if we're in a secure context (required for AudioContext)\n            if (window.isSecureContext === false) {\n                throw new Error('Page must be served over HTTPS or localhost to use Web Audio API');\n            }\n            \n            // Check for Web Audio API support\n            const AudioContext = window.AudioContext || window.webkitAudioContext;\n            if (!AudioContext) {\n                throw new Error('Web Audio API is not supported in this browser');\n            }\n            \n            // Log browser info for debugging\n            console.log('Browser info:', {\n                userAgent: navigator.userAgent,\n                secureContext: window.isSecureContext,\n                hasAudioContext: !!(window.AudioContext || window.webkitAudioContext),\n                location: window.location.href\n            });\n            \n            // Check if we're in a secure context (required for AudioContext)\n            if (window.isSecureContext === false) {\n                throw new Error('Page must be served over HTTPS or localhost to use Web Audio API');\n            }\n            \n            // Check for Web Audio API support\n            if (!window.AudioContext && !window.webkitAudioContext) {\n                throw new Error('Web Audio API is not supported in this browser');\n            }\n            \n            // Create the synthesizer\n            console.log('Creating DogSynthesizer instance...');\n            this.synth = new DogSynthesizer();\n            \n            // Log audio context state\n            console.log('AudioContext state:', this.synth.audioContext.state);\n            \n            // Handle audio context state\n            const handleAudioContextState = async () => {\n                try {\n                    if (this.synth.audioContext.state === 'suspended') {\n                        console.log('AudioContext is suspended, resuming...');\n                        await this.synth.audioContext.resume();\n                    }\n                    \n                    console.log('AudioContext state after resume:', this.synth.audioContext.state);\n                    \n                    if (this.synth.audioContext.state === 'running') {\n                        this.initialized = true;\n                        this.initializing = false;\n                        this.uiElements.testBtn.disabled = false;\n                        this.uiElements.startBtn.disabled = true;\n                        this.updateStatus('Audio ready! Click Test or adjust parameters.', '#2ecc71');\n                        \n                        // Enable test and play buttons\n                        this.uiElements.testBtn.disabled = false;\n                        if (this.uiElements.playBtn) {\n                            this.uiElements.playBtn.disabled = false;\n                        }\n                        \n                        // Play test sound after a short delay\n                        setTimeout(() => {\n                            this.playTestSound();\n                        }, 300);\n                    }\n                } catch (error) {\n                    console.error('Error handling audio context state:', error);\n                    this.updateStatus('Error initializing audio. Try clicking Initialize again.', '#e74c3c');\n                    this.initializing = false;\n                }\n            };\n            \n            // Set up user interaction handler\n            const handleUserInteraction = async () => {\n                document.removeEventListener('click', handleUserInteraction);\n                document.removeEventListener('keydown', handleUserInteraction);\n                document.removeEventListener('touchstart', handleUserInteraction);\n                \n                try {\n                    await handleAudioContextState();\n                } catch (error) {\n                    console.error('Error in user interaction handler:', error);\n                    this.updateStatus('Error enabling audio. Try refreshing the page.', '#e74c3c');\n                    this.initializing = false;\n                }\n            };\n            \n            // If already running, proceed, otherwise wait for user interaction\n            if (this.synth.audioContext.state === 'running') {\n                await handleAudioContextState();\n            } else {\n                this.updateStatus('Click or tap anywhere to enable audio...', '#f39c12');\n                document.addEventListener('click', handleUserInteraction, { once: true });\n                document.addEventListener('keydown', handleUserInteraction, { once: true });\n                document.addEventListener('touchstart', handleUserInteraction, { once: true });\n            }\n            \n        } catch (error) {\n            console.error('Error initializing audio:', error);\n            let errorMessage = 'Error initializing audio: ' + error.message;\n            \n            // Provide more user-friendly error messages\n            if (error.message.includes('secure context')) {\n                errorMessage = 'Audio requires a secure context (HTTPS or localhost)';\n            } else if (error.message.includes('Web Audio API')) {\n                errorMessage = 'Web Audio API not supported in this browser';\n            }\n            \n            this.updateStatus(errorMessage, '#e74c3c');\n            \n            // Log additional debug info\n            console.log('Browser info:', {\n                userAgent: navigator.userAgent,\n                secureContext: window.isSecureContext,\n                hasAudioContext: !!(window.AudioContext || window.webkitAudioContext),\n                audioContextState: this.synth?.audioContext?.state\n            });\n        }\n    }\n    \n    setupUIElements() {\n        // Main controls\n        this.uiElements = {\n            startBtn: document.getElementById('startBtn'),\n            testBtn: document.getElementById('testBtn'),\n            playBtn: document.getElementById('playBtn'),\n            status: document.getElementById('status'),\n            sliders: {}\n        };\n        \n        // Initialize all sliders\n        document.querySelectorAll('input[type=\"range\"]').forEach(slider => {\n            this.uiElements.sliders[slider.id] = slider;\n            \n            // Set initial value display\n            const valueEl = document.getElementById(`${slider.id}-value`);\n            if (valueEl) {\n                valueEl.textContent = slider.value;\n            }\n        });\n        \n        // Get preset buttons\n        this.uiElements.presetBtns = document.querySelectorAll('.preset-btn');\n    }\n    \n    setupEventListeners() {\n        // Slider changes\n        Object.entries(this.uiElements.sliders).forEach(([id, slider]) => {\n            slider.addEventListener('input', (e) => this.onSliderChange(id, e.target.value));\n        });\n        \n        // Preset buttons\n        this.uiElements.presetBtns.forEach(btn => {\n            btn.addEventListener('click', () => this.loadPreset(btn.dataset.preset));\n        });\n        \n        // Play button\n        if (this.uiElements.playBtn) {\n            this.uiElements.playBtn.addEventListener('click', () => this.playTestSound());\n        }\n    }\n    \n    updateSynthFromSlider(id, value) {\n        if (!this.initialized || !this.synth || this.isLoadingPreset) return;\n        \n        const numValue = parseFloat(value);\n        \n        // Clear any pending updates\n        if (this.paramUpdateTimeout) {\n            clearTimeout(this.paramUpdateTimeout);\n        }\n        \n        // Debounce the parameter updates to prevent rapid firing\n        this.paramUpdateTimeout = setTimeout(() => {\n            // Map slider IDs to parameters\n            const paramMap = {\n                pitch: 'pitch',\n                jitter: 'jitter',\n                shimmer: 'shimmer',\n                breathiness: 'breathiness',\n                noiseColor: 'noiseColor',\n                'f1': 'formants',\n                'f2': 'formants',\n                'f3': 'formants',\n                'amp-attack': 'amp-attack',\n                'amp-decay': 'amp-decay',\n                'amp-sustain': 'amp-sustain',\n                'amp-release': 'amp-release'\n            };\n            \n            const param = paramMap[id];\n            if (!param) return;\n            \n            try {\n                // Handle formant updates\n                if (id.startsWith('f')) {\n                    const formantIndex = parseInt(id[1]) - 1;\n                    const formants = [...this.synth.params.formants];\n                    formants[formantIndex] = numValue;\n                    this.synth.setParam('formants', formants);\n                } else {\n                    this.synth.setParam(param, numValue);\n                }\n            } catch (error) {\n                console.error('Error updating parameter:', error);\n            }\n        }, 16); // ~60fps update rate\n    }\n    \n    onSliderChange(id, value) {\n        if (!this.initialized || this.isLoadingPreset) return;\n        \n        const numValue = parseFloat(value);\n        \n        // Update the display value\n        const valueEl = document.getElementById(`${id}-value`);\n        if (valueEl) {\n            valueEl.textContent = numValue.toFixed(2);\n        }\n        \n        // Update the synth\n        this.updateSynthFromSlider(id, numValue);\n    }\n    \n    loadPreset(presetName) {\n        if (!this.initialized) {\n            this.updateStatus('Please initialize audio first', '#e67e22');\n            return;\n        }\n        \n        const preset = this.presets[presetName];\n        if (!preset) {\n            console.warn(`Preset '${presetName}' not found`);\n            return;\n        }\n        \n        // Clear any pending updates\n        if (this.paramUpdateTimeout) {\n            clearTimeout(this.paramUpdateTimeout);\n            this.paramUpdateTimeout = null;\n        }\n        \n        try {\n            // Set a flag to indicate we're programmatically updating sliders\n            this.isLoadingPreset = true;\n            \n            // Batch all parameter updates\n            const updates = [];\n            \n            // First, collect all updates\n            Object.entries(preset).forEach(([id, value]) => {\n                const slider = this.uiElements.sliders?.[id];\n                if (slider) {\n                    // Update the slider value without triggering the input event\n                    slider.value = value;\n                    // Update the display value\n                    const valueEl = document.getElementById(`${id}-value`);\n                    if (valueEl) {\n                        valueEl.textContent = parseFloat(value).toFixed(2);\n                    }\n                    // Collect the update\n                    updates.push({ id, value });\n                }\n            });\n            \n            // Apply all updates at once\n            updates.forEach(({ id, value }) => {\n                this.updateSynthFromSlider(id, value);\n            });\n            \n            this.updateStatus(`Loaded preset: ${presetName}`, '#9b59b6');\n            \n            // Play the preset sound\n            this.playTestSound();\n            \n        } catch (error) {\n            console.error('Error loading preset:', error);\n            this.updateStatus('Error loading preset', '#e74c3c');\n        } finally {\n            // Clear the flag when done\n            this.isLoadingPreset = false;\n        }\n    }\n        \n    async playTestSound() {\n        if (!this.synth) {\n            console.warn('Cannot play test sound: No synth instance');\n            this.updateStatus('Audio not ready. Click Initialize first.', '#e74c3c');\n            return;\n        }\n        \n        try {\n            const audioCtx = this.synth.audioContext;\n            \n            // Create a resume promise if needed\n            if (audioCtx.state === 'suspended') {\n                console.log('AudioContext suspended, attempting to resume...');\n                await audioCtx.resume();\n            }\n            \n            // Check if the context is actually running\n            if (audioCtx.state !== 'running') {\n                console.warn('AudioContext could not be resumed, state:', audioCtx.state);\n                this.updateStatus('Audio not ready. Try clicking the Play button again.', '#e67e22');\n                return;\n            }\n            \n            console.log('Playing test sound with params:', {\n                pitch: this.synth.params.pitch,\n                state: audioCtx.state\n            });\n            \n            // Play a short note (duration: 1.0s, velocity: 0.7)\n            this.synth.playNote(1.0, 0.7);\n            this.updateStatus('Playing test sound...', '#2ecc71');\n            \n        } catch (error) {\n            console.error('Error playing test sound:', error);\n            this.updateStatus('Error playing sound: ' + error.message, '#e74c3c');\n        }\n    }\n    \n    async initializeAudio() {\n        if (this.synth) {\n            console.log('Audio already initialized, playing test sound...');\n            await this.playTestSound();\n            return;\n        }\n        \n        this.updateStatus('Initializing audio...', '#f39c12');\n        \n        try {\n            // Create a new synthesizer instance\n            this.synth = new DogSynthesizer();\n            \n            // Wait for the audio context to be ready\n            await new Promise(resolve => {\n                const checkReady = () => {\n                    if (this.synth.audioContext && this.synth.audioContext.state === 'running') {\n                        resolve();\n                    } else {\n                        setTimeout(checkReady, 50);\n                    }\n                };\n                checkReady();\n            });\n            \n            // Play a short test sound\n            await this.playTestSound();\n            \n            this.updateStatus('Audio initialized!', '#2ecc71');\n            \n        } catch (error) {\n            console.error('Error initializing audio:', error);\n            this.updateStatus('Error initializing audio: ' + error.message, '#e74c3c');\n            throw error; // Re-throw to allow retry\n        }\n    }\n    \n    getDefaultPresets() {\n        return {\n            bark: {\n                pitch: 220,\n                jitter: 0.05,\n                shimmer: 0.08,\n                breathiness: 0.1,\n                noiseColor: 1000,\n                f1: 650,\n                f2: 1100,\n                f3: 2200,\n                'amp-attack': 0.01,\n                'amp-decay': 0.05,\n                'amp-sustain': 0.6,\n                'amp-release': 0.2\n            },\n            whine: {\n                pitch: 450,\n                jitter: 0.03,\n                shimmer: 0.04,\n                breathiness: 0.15,\n                noiseColor: 1200,\n                f1: 800,\n                f2: 1600,\n                f3: 2800,\n                'amp-attack': 0.01,\n                'amp-decay': 0.1,\n                'amp-sustain': 0.7,\n                'amp-release': 0.3\n            },\n            growl: {\n                pitch: 120,\n                jitter: 0.1,\n                shimmer: 0.12,\n                breathiness: 0.2,\n                noiseColor: 800,\n                f1: 500,\n                f2: 900,\n                f3: 1800,\n                'amp-attack': 0.05,\n                'amp-decay': 0.2,\n                'amp-sustain': 0.8,\n                'amp-release': 0.4\n            }\n        };\n    }\n    \n    updateStatus(message, color = '#4facfe') {\n        if (this.uiElements.statusEl) {\n            this.uiElements.statusEl.textContent = message;\n            this.uiElements.statusEl.style.color = color;\n        }\n        console.log(`[Status] ${message}`);\n    }\n    \n    logDebug(message) {\n        if (this.uiElements.debugEl) {\n            const logEntry = document.createElement('div');\n            logEntry.textContent = `[${new Date().toISOString()}] ${message}`;\n            this.uiElements.debugEl.prepend(logEntry);\n            \n            // Keep only the last 10 log entries\n            while (this.uiElements.debugEl.children.length > 10) {\n                this.uiElements.debugEl.removeChild(this.uiElements.debugEl.lastChild);\n            }\n        }\n        console.debug(`[Debug] ${message}`);\n    }\n}\n","// Main application entry point\nimport { SynthController } from './controllers/SynthController.js';\n\n// Initialize the application when the DOM is loaded\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n        new SynthController();\n    });\n} else {\n    new SynthController();\n}\n\n// Make the controller available globally for debugging\nwindow.app = {\n    SynthController\n};\n"],"names":["EventBus","constructor","this","listeners","Map","on","event","callback","has","set","Set","get","add","callbacks","delete","size","emit","data","forEach","error","removeAllListeners","clear","bind","events","eventBus","LFGlottalSource","audioContext","_classCallCheck","rd","jitter","shimmer","f0","osc","createOscillator","type","frequency","setValueAtTime","currentTime","gain","createGain","value","connect","start","activeNotes","setupEventListeners","console","log","key","_this","_ref","_this$envelope","param","numValue","parseFloat","now","cancelScheduledValues","envelope","setParam","arguments","length","undefined","_event$velocity","velocity","time","id","noteOn","noteOff","Math","random","destination","disconnect","startTime","max","noteGain","setFrequency","shimmerFactor","amp","min","concat","toFixed","linearRampToValueAtTime","_this$audioContext","_this2","releaseTime","currentValue","setTimeout","NoiseGenerator","bufferSize","noiseBuffer","createNoiseBuffer","noise","createBufferSource","buffer","loop","filter","createBiquadFilter","Q","createBuffer","sampleRate","output","getChannelData","i","freq","q","level","duration","FormantFilterBank","filters","gains","mix","input","push","setFormants","dryGain","wetGain","setMix","apply","_toConsumableArray","setBandwidths","f1","f2","f3","f4","_this3","bw1","bw2","bw3","bw4","_this4","bw","bwToQ","PI","A","pow","sqrt","g1","g2","g3","g4","_this5","AudioNode","_input","Error","mixer","source","EnvelopeGenerator","attack","decay","sustain","release","startsWith","paramName","split","startValue","peakValue","sustainValue","context","attackEnd","decayEnd","releaseStart","DogSynthesizer","window","AudioContext","webkitAudioContext","glottis","formants","params","pitch","breathiness","noiseColor","formantQs","updateParams","preset","loadPreset","hasOwnProperty","abs","updateFormants","Object","entries","_ref2","_ref3","_slicedToArray","_ref4","_ref5","endTime","noteId","toString","substr","timeout","cancel","clearTimeout","_regeneratorRuntime","r","t","e","prototype","n","o","Symbol","iterator","a","asyncIterator","u","toStringTag","c","defineProperty","enumerable","configurable","writable","h","Generator","create","done","method","arg","delegate","d","f","sent","_sent","dispatchException","abrupt","s","Context","call","wrap","GeneratorFunction","GeneratorFunctionPrototype","l","p","getPrototypeOf","y","x","v","g","_invoke","AsyncIterator","_typeof","resolve","__await","then","TypeError","next","w","tryEntries","m","reset","isNaN","displayName","isGeneratorFunction","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","unshift","pop","values","prev","charAt","slice","stop","rval","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","_next","_throw","_defineProperties","_toPropertyKey","toPrimitive","String","_toPrimitive","SynthController","synth","initialized","initializing","isLoadingPreset","paramUpdateTimeout","uiElements","presets","getDefaultPresets","playTestSound","initAudio","initialize","onSliderChange","updateSynthFromSlider","document","readyState","addEventListener","_initialize","_callee","_context","setupUIElements","startBtn","testBtn","updateStatus","_initAudio","_callee4","handleAudioContextState","_handleUserInteraction","_this$synth","errorMessage","_context4","userAgent","navigator","secureContext","isSecureContext","hasAudioContext","location","href","state","_callee2","_context2","resume","disabled","playBtn","t0","handleUserInteraction","_callee3","_context3","removeEventListener","once","message","includes","audioContextState","getElementById","status","sliders","querySelectorAll","slider","valueEl","textContent","presetBtns","target","btn","dataset","_this6","formantIndex","parseInt","presetName","_this7","updates","_this7$uiElements$sli","_ref6","_ref7","warn","_playTestSound","_callee5","audioCtx","_context5","playNote","_initializeAudio","_callee6","_this8","_context6","checkReady","bark","whine","growl","color","statusEl","style","debugEl","logEntry","createElement","Date","toISOString","prepend","children","removeChild","lastChild","debug","app"],"sourceRoot":""}